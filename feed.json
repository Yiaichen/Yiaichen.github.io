{
    "version": "https://jsonfeed.org/version/1",
    "title": "Vayi",
    "subtitle": null,
    "icon": "http://vayi.site/images/favicon.ico",
    "description": "vayi's blog~",
    "home_page_url": "http://vayi.site",
    "items": [
        {
            "id": "http://vayi.site/ofs/",
            "url": "http://vayi.site/ofs/",
            "title": "ofs1.5部署",
            "date_published": "2019-12-25T02:33:58.000Z",
            "content_html": "<h3 id=\"服务器配置推荐\"><a class=\"anchor\" href=\"#服务器配置推荐\">#</a> 服务器配置（推荐）</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务器类型</th>\n<th style=\"text-align:center\">数量 / 台</th>\n<th style=\"text-align:center\">CPU</th>\n<th style=\"text-align:center\">内存</th>\n<th style=\"text-align:center\">系统磁盘</th>\n<th style=\"text-align:center\">数据磁盘</th>\n<th style=\"text-align:center\">网络带宽</th>\n<th style=\"text-align:center\">操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">应用服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">8 核</td>\n<td style=\"text-align:center\">32G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">300G SSD</td>\n<td style=\"text-align:center\">4M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">接口服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4 核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">300G SSD</td>\n<td style=\"text-align:center\">5M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RDS 数据库 (高可用版)</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">8 核</td>\n<td style=\"text-align:center\">32G</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">1T SSD</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">Mysql 5.7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基础服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4 核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">500G SSD</td>\n<td style=\"text-align:center\">2M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">报表服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4 核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">200G</td>\n<td style=\"text-align:center\">2M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4 核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">500G</td>\n<td style=\"text-align:center\">2M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试 RDS 数据库 (高可用版)</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4 核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">500G SSD</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">Mysql 5.7</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>备注：如果有京东平台业务，还需加购一台同等配置京东云鼎 ECS 服务器、京东云鼎 RDS 服务器</p>\n</blockquote>\n<h3 id=\"服务器类型\"><a class=\"anchor\" href=\"#服务器类型\">#</a> 服务器类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务器类型</th>\n<th style=\"text-align:center\">部署应用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">应用服务器</td>\n<td style=\"text-align:center\">ofs</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">接口服务器</td>\n<td style=\"text-align:center\">各种 edi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RDS 数据库 (高可用版)</td>\n<td style=\"text-align:center\">mysql</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基础服务器</td>\n<td style=\"text-align:center\">redis、mongoDB、rabbitMQ</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">报表服务器</td>\n<td style=\"text-align:center\">ofs (只给报表类功能使用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试服务器</td>\n<td style=\"text-align:center\">所有应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试 RDS 数据库 (高可用版)</td>\n<td style=\"text-align:center\">mysql</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>&lt;font color=#DC143C&gt;<strong> 以下流程仅以测试服务器做演示，生产服务器以上述表格为标准，具体根据项目情况进行改动</strong> &lt;/font&gt;</p>\n</blockquote>\n<h3 id=\"添加用户\"><a class=\"anchor\" href=\"#添加用户\">#</a> 添加用户</h3>\n<blockquote>\n<p>系统必须在 ttx 用户下运行，所以需要为新系统添加 ttx 用户</p>\n</blockquote>\n<blockquote>\n<p>以下操作以 root 用户权限执行</p>\n</blockquote>\n<ul>\n<li>\n<p>新建用户并指定用户目录</p>\n<pre><code>useradd -d /home/ttx -m ttx\npasswd ttx\n</code></pre>\n<blockquote>\n<p>用户密码重启之后才会生效</p>\n</blockquote>\n</li>\n<li>\n<p>赋予 sudo 权限</p>\n<pre><code>vi /etc/sudoers\n</code></pre>\n<blockquote>\n<p>在 root 下添加一行，如下所示</p>\n</blockquote>\n<blockquote>\n<p>[注意] 此文件为只读文件，请保存时使用: <code>wq!</code>  命令</p>\n</blockquote>\n<pre><code># User privilege specification\nroot    ALL=(ALL:ALL) ALL\nttx     ALL=(ALL:ALL) ALL\n</code></pre>\n<blockquote>\n<p>[可选] 修改新建用户的 Shell 类型</p>\n</blockquote>\n<blockquote>\n<p>找到 ttx 的一行，检查是否与下面一致，如不一致，修改</p>\n</blockquote>\n<pre><code>root@iZ8vbeurni16yy34ptzcdzZ:/# vi /etc/passwd\nttx:x:1000:1000::/home/ttx:/bin/bash\n</code></pre>\n</li>\n<li>\n<p>创建应用主目录</p>\n<pre><code>mkdir /home/ttx/app\n</code></pre>\n</li>\n</ul>\n<h3 id=\"挂载数据盘\"><a class=\"anchor\" href=\"#挂载数据盘\">#</a> 挂载数据盘</h3>\n<pre><code>仅针对数据盘默认未挂载的情况，比如阿里云。(这里以50G数据盘做演示)\n以下操作以root用户权限执行\n</code></pre>\n<ul>\n<li>\n<p>查看设备目录，通常数据盘为 <code>/dev/vdb</code></p>\n<pre><code>fdisk -l\n</code></pre>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/fdiskbefore.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>创建分区</p>\n<pre><code>fdisk /dev/vdb\n</code></pre>\n<blockquote>\n<p>根据提示，依次输入<strong> n-&gt;p-&gt;1-&gt; 回车 -&gt; 回车 -&gt;wq</strong> 成功后会有以下输出</p>\n</blockquote>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/fdisk.png\" alt=\"image\" /></p>\n<blockquote>\n<p>检查分区是否创建成功</p>\n</blockquote>\n<pre><code>fdisk -l\n</code></pre>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/fdiskafter.png\" alt=\"image\" /></p>\n<blockquote></blockquote>\n</li>\n<li>\n<p>格式化</p>\n<pre><code>mkfs.ext4 /dev/vdb1\n</code></pre>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/mkfs.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>挂载数据盘</p>\n<pre><code>chown ttx:ttx home/ttx/app/\nmount /dev/vdb1 /home/ttx/app\n</code></pre>\n<blockquote>\n<p>检查挂载结果  <code>df -h</code></p>\n</blockquote>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/df-h.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>设置自动挂载（请根据实际挂载硬盘参数对下面命令做适当修改）</p>\n<pre><code>echo '/dev/vdb1 /home/ttx/app ext4 defaults 0 0 ' &gt;&gt;/etc/fstab  \n</code></pre>\n</li>\n</ul>\n<h3 id=\"安装基础运行环境\"><a class=\"anchor\" href=\"#安装基础运行环境\">#</a> 安装基础运行环境</h3>\n<h4 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h4>\n<ul>\n<li>以创建好的 <code>ttx</code>  身份进行登录</li>\n<li>创建存放安装包的目录:  <code>mkdir /home/ttx/installer</code></li>\n<li>准备好<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">安装包</span></li>\n</ul>\n<h4 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 docker</h4>\n<ul>\n<li>\n<p>使用阿里解决方案 安装 <code>docker-engine</code></p>\n<pre><code># [docker-engine已停止支持，请使用以下脚本安装]\n\n# step 1: 安装必要的一些系统工具\nsudo apt-get update\nsudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n# step 2: 安装GPG证书\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n# Step 3: 写入软件源信息\nsudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;\n# Step 4: 更新并安装 Docker-CE\nsudo apt-get -y update\nsudo apt-get -y install docker-ce\n\n# https://help.aliyun.com/document_detail/60742.html\n</code></pre>\n<blockquote>\n<p>注意：如果 curl 不存在，请使用以下命令安装</p>\n</blockquote>\n<pre><code>sudo apt-get install curl\n</code></pre>\n<blockquote>\n<p><strong>非必要流程</strong> 修改 daemon 配置文件 <code>/etc/docker/daemon.json</code>  来使用加速器</p>\n</blockquote>\n<pre><code>sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json &lt;&lt;-EOF\n&#123;\n  &quot;registry-mirrors&quot;: [&quot;https://gkhkf8gb.mirror.aliyuncs.com&quot;]\n&#125;\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n</code></pre>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/EOF.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>将用户 ttx 加入允许执行 docker 组</p>\n<pre><code>sudo usermod -aG docker ttx\n</code></pre>\n</li>\n</ul>\n<h4 id=\"安装docker-compose\"><a class=\"anchor\" href=\"#安装docker-compose\">#</a> 安装 docker-compose</h4>\n<ul>\n<li>\n<p>上传  <code>docker-compose-Linux-x86_64.1.7.1</code>  文件到 <code>/home/ttx/installer</code>  也可以下载最新版本</p>\n<pre><code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose`\n</code></pre>\n</li>\n<li>\n<p>执行以下脚本安装</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<pre><code>cd /home/ttx/installer\n#复制并重命名\nsudo cp docker-compose-Linux-x86_64.1.7.1 /usr/local/bin/docker-compose\n#更改文件权限使其可以执行　+x　代表执行权限\nsudo chmod +x /usr/local/bin/docker-compose  \n</code></pre>\n<blockquote>\n<p>检查安装结果</p>\n</blockquote>\n<pre><code>ttx@iZ8vbeurni16yy34ptzcdzZ:/# docker-compose --version\ndocker-compose version 1.7.1, build 0a9ab35\n</code></pre>\n</li>\n</ul>\n<h4 id=\"mongo-rabbit-redis-mysql\"><a class=\"anchor\" href=\"#mongo-rabbit-redis-mysql\">#</a> mongo、rabbit、redis、mysql</h4>\n<blockquote>\n<p>创建镜像存放目录</p>\n</blockquote>\n<pre><code>sudo mkdir /home/ttx/installer/images\nsudo mkdir /home/ttx/installer/compose\n</code></pre>\n<ul>\n<li>\n<p>上传镜像</p>\n<ul>\n<li>上传对应的镜像文件到 <code>/home/ttx/installer/images</code></li>\n<li>上传 compose.zip 到 <code>/home/ttx/installer/compose</code></li>\n</ul>\n</li>\n<li>\n<p>安装镜像</p>\n<ul>\n<li>执行以下脚本装载镜像</li>\n</ul>\n<pre><code>cd /home/ttx/installer/images\nsudo docker load &lt; mongo_3.2.4.tar\nsudo docker load &lt; rabbitmq_3.6.1-management.tar\nsudo docker load &lt; redis_3.2.0.tar\n#仅当mysql在容器中运行时才运行以下命令\nsudo docker load &lt; mysql_5.7.11.tar\n</code></pre>\n</li>\n<li>\n<p>启动服务 分别进入每一个容器目录，执行以下脚本</p>\n<pre><code>sudo docker-compose up -d\n</code></pre>\n<blockquote>\n<p>检查镜像是否创建成功  <code>docker ps</code></p>\n</blockquote>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/22/dockerps.png\" alt=\"image\" /></p>\n<ul>\n<li>\n<p>注意：MySql 参数设置在  <code>/etc/my.cnf</code>  中的 <code>[mysqld]</code>  后添加以下段：</p>\n<ul>\n<li>使用 utf-8 编码： <code>character-set-server=utf8</code></li>\n<li>表不区分大小写： <code>lower_case_table_names=1</code></li>\n<li>分组连接最大长度： <code>group_concat_max_len=102400</code></li>\n<li>缓冲池字节大小： <code>innodb_buffer_pool_size = 数据库内存一半</code></li>\n</ul>\n</li>\n<li>\n<p>注意：创建 rabbitMQ 的 <code>虚拟主机(VirtualHost)</code>  新安装的 rabbitMQ 必须新建主机，不允许使用默认的。新主机名称为 <code>企业ID</code> ，企业 ID 的格式为 <code>4位项目编码 + ofs +xxxx</code> ，其中 xxxx 为 <code>prod</code>  或者 <code>test</code>  登录 <code>http://服务器地址:35673</code>  进行创建，创建后将主机权限赋予 ttx 用户</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> tomcat</h4>\n<blockquote>\n<p>以下操作以 ttx 用户权限执行</p>\n</blockquote>\n<ul>\n<li>上传<strong> tomcat-deploy-1.6.zip 到 /home/ttx/installer</strong> 目录下\n<ul>\n<li>\n<p>解压缩</p>\n<pre><code>sudo unzip ./tomcat-deploy-1.6.zip -d /home/ttx/app/tomcat-deploy\n</code></pre>\n</li>\n<li>\n<p>创建系统环境</p>\n<blockquote>\n<p>运行前请检查 <code>set_env.py</code>  中 <code>APP_HOME</code>  的目录是否正确，应为 <code>/home/ttx/app/</code></p>\n</blockquote>\n<pre><code>cd /home/ttx/app/tomcat-deploy\npython install_env.py\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果服务器上没有 python 命令，而只有 python3，则使用 python3 代替</p>\n</blockquote>\n<h4 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> nginx</h4>\n<blockquote>\n<p>以下操作以 ttx 用户权限执行</p>\n</blockquote>\n<ul>\n<li>上传<strong> nginx-1.11.6.tar.gz 到 /home/ttx/installer</strong> 目录下</li>\n<li>执行以下脚本安装<pre><code>sudo apt-get install build-essential  libpcre3-dev libssl-dev\nsudo tar -zxvf /home/ttx/installer/nginx-1.11.6.tar.gz -C /home/ttx/app/\ncd /home/ttx/app\ncd nginx-1.11.6\n#对nginx进行配置\nsudo ./configure --with-http_ssl_module --prefix=/home/ttx/app/nginx/\n#编译安装\nsudo make &amp;&amp; make install\ncd /home/ttx/app/nginx\n# 备份配置文件\nsudo mv conf/nginx.conf conf/nginx.conf.backup\nsudo mkdir webapps\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>tar 命令如果不存在的话先下载</p>\n</blockquote>\n<blockquote>\n<p>如果服务器上没有 python 命令，而只有 python3，则使用 python3 代替</p>\n</blockquote>\n<ul>\n<li>\n<p>上传配置文件 <code>nginx.conf</code>  和 <code>proxy.conf</code>  到 <code>/home/ttx/app/nginx/conf/</code>  目录下</p>\n</li>\n<li>\n<p>在<span class=\"exturl\" data-url=\"aHR0cDovL25leHVzLmN5YmVydHJhbnMuaXR0eC5jb20uY24v\"> nexus</span> 上下载对应的 <code>cbt-web</code>  (这里以 <code>cbt-web-2.5.12</code>  做演示)</p>\n<ul>\n<li>\n<p>搜索 <code>cbt-web-2.5.12</code> <br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/nexus.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>点击对应版本<br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/seach.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>下载 cbt_web 压缩包<br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/download.png\" alt=\"image\" /></p>\n</li>\n<li>\n<p>把压缩包上传到服务器 <code>/home/ttx/app/nginx/webapps/ofs1_5/</code>  目录下</p>\n<pre><code>cd /home/ttx/app/nginx/webapps/\n# 创建ofs1_5文件夹\nsudo mkdir ofs1_5\n\n# 执行上传操作 ... ...\n\n# 解压cbt-web\nsudo tar -zxvf cbt-web-2.5.12-20190718.063712-5.tar.gz\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>测试并启动 <code>nginx</code></p>\n<pre><code> cd /home/ttx/app/nginx/sbin\n #测试nginx配置文件\n sudo ./nginx -t\n #启动　nginx\n sudo ./nginx\n</code></pre>\n<blockquote>\n<p>Nginx 配置没问题会有以下输出</p>\n</blockquote>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/23/93ZTJ882G88VANDT5G.png\" alt=\"image\" /></p>\n<blockquote>\n<p><strong>注意：</strong> 使用以下命令重启 Nginx 服务</p>\n</blockquote>\n<pre><code>sudo ./nginx -s reload\n</code></pre>\n</li>\n<li>\n<p>检查是否启动成功</p>\n<ul>\n<li>在浏览器输入  <code>http://服务器地址:30001/</code></li>\n<li>有以下展示就说明 Nginx 已经配置成功了<br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/XKCNLIN1M49SFEC3.png\" alt=\"image\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"准备程序环境\"><a class=\"anchor\" href=\"#准备程序环境\">#</a> 准备程序环境</h3>\n<blockquote>\n<p>准备程序的部署目录和运行目录 (下述以 <code>ofs1_5</code> 、 <code>license</code>  演示)</p>\n</blockquote>\n<pre><code>cd /home/ttx/app/tomcat-deploy\npython install_app.py license 30008\n# 比如内存限制为最低1g，最高4g\npython install_app.py ofs1_5 9005 1g 4g\n</code></pre>\n<blockquote>\n<p>注意：如果服务器上没有 python 命令，而只有 python3，则执行以下命令</p>\n</blockquote>\n<pre><code>cd /home/ttx/app/tomcat-deploy\npython3 install_app.py license 30008\n# 比如内存限制为最低1g，最高4g\npython3 install_app.py ofs1_5 9005 1g 4g\n</code></pre>\n<h3 id=\"安装license服务\"><a class=\"anchor\" href=\"#安装license服务\">#</a> 安装 license 服务</h3>\n<ul>\n<li>\n<p>上传 license.zip 文件到 /home/ttx/app/license/upload 目录</p>\n</li>\n<li>\n<p>执行命令</p>\n<pre><code>sudo chmod +x /home/ttx/app/jre/lib/amd64/*\n</code></pre>\n</li>\n<li>\n<p>创建执行脚本</p>\n<pre><code>cd /home/ttx/app/license\nsudo echo &quot;export LD_LIBRARY_PATH=/home/ttx/app/jre/lib/amd64 &amp;&amp; nohup /home/ttx/app/jre/bin/java -jar /home/ttx/app/license/upload/license.zip &amp;&quot; &gt; run.sh\nsudo chmod +x run.sh\n</code></pre>\n</li>\n<li>\n<p>启动 license 服务</p>\n<pre><code>sh ./run.sh\n</code></pre>\n</li>\n<li>\n<p>访问 license 页面： <code>http://服务器地址:30008</code> , 点击注册文件进行下载<br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/24/license.png\" alt=\"license.png\" /></p>\n</li>\n<li>\n<p>把下载的 cluster-blank.lic 给项目经理，进行授权</p>\n</li>\n<li>\n<p>得到授权者提供的正式 license 文件后，将文件（通常为 lic 文件 ( <code>ttx.lic</code> )）放在 licenses 目录下</p>\n<pre><code># 重启license服务\nps -ef | grep license\n</code></pre>\n<blockquote>\n<p>通常输出如下：</p>\n</blockquote>\n<pre><code>ttx       9354     1  1 20:27 pts/1    00:00:15 /home/ttx/app/jre/bin/java -jar /home/ttx/app/license/upload/license.zip\nttx       9632  1277  0 20:42 pts/0    00:00:00 grep --color=auto java\n</code></pre>\n<blockquote>\n<p>找到含有 license.zip 的进程，杀掉进程；比如上例中，进程 ID 为 9354</p>\n</blockquote>\n<pre><code># 将9354替换为实际的进程ID\nsudo kill 9354\ncd /home/ttx/app/license\n./run.sh\n</code></pre>\n</li>\n<li>\n<p>访问 <code>http://服务器地址:30008</code> ，正常情况应显示服务器的 license 信息</p>\n</li>\n</ul>\n<h3 id=\"jenkins构建\"><a class=\"anchor\" href=\"#jenkins构建\">#</a> Jenkins 构建</h3>\n<ul>\n<li>进入 <code>Jenkins</code>  配置页面: <span class=\"exturl\" data-url=\"aHR0cDovL2NpLml0dHguY29tLmNu\">http://ci.ittx.com.cn</span> 进入对应文件夹 新建项目目录 (例如我的项目是 <code>xxx</code> )<br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/24/mainhtml.png\" alt=\"mainhtml.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/24/dirs.png\" alt=\"dirs.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/24/jenkinsdir.png\" alt=\"jenkinsdir.png\" /></li>\n</ul>\n<blockquote>\n<p>最后 save 保存就行</p>\n</blockquote>\n<ul>\n<li>新建一个项目，这里可以直接复制已有的项目，先找到对应项目的路径。 比如 <code>ofs1_5</code>  的路径是这个 <code>xoms/OFS-1.5/ofs-1.5</code></li>\n</ul>\n<blockquote>\n<p>新建项目，粘贴复制好的  <code>xoms/OFS-1.5/ofs-1.5</code></p>\n</blockquote>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/24/jenkinsitem.png\" alt=\"jenkinsitem.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinscopy.png\" alt=\"jenkinsitem.png\" /></p>\n<blockquote>\n<p>根据项目进行修改 <code>参与人</code> 以及对应的 <code>customerID</code> , 然后 <code>save</code>  即可</p>\n</blockquote>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinsedit1.png\" alt=\"jenkinsitem.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinsedit2.png\" alt=\"jenkinsitem.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinsedit3.png\" alt=\"jenkinsitem.png\" /></p>\n<ul>\n<li>打包项目，获取对应的 <code>下载脚本</code></li>\n</ul>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinsscript1.png\" alt=\"jenkinsitem.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinsscript2.png\" alt=\"jenkinsitem.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/jenkinsscript3.png\" alt=\"jenkinsitem.png\" /></p>\n<ul>\n<li>上传刚下载的 <code>update-xxx-xofs-test.sh</code>  到 <code>/home/ttx/app/tomcat-deploy</code></li>\n<li>配置阿里 <code>oss</code> （可选：具体看项目是否支持）\n<ul>\n<li>oss 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90dHgtZG93bmxvYWQub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9wcm9qZWN0cw==\">https://ttx-download.oss-cn-hangzhou.aliyuncs.com/projects</span></li>\n<li>修改  <code>update-xxx-xofs-test.sh</code>  url  <code>(https://release.cybertrans.ittx.com.cn)</code>  为 <code>oss地址</code> <br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/oss.png\" alt=\"jenkinsitem.png\" /></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ofs配置\"><a class=\"anchor\" href=\"#ofs配置\">#</a> ofs 配置</h3>\n<ul>\n<li>执行数据库初始化脚本</li>\n<li>上传 <code>application.yml、application-xxx.yml</code>  到  <code>/home/ttx/app/ofs/conf/default</code>  目录下\n<ul>\n<li>注意:  <code>xxx</code>  的取值为：\n<ul>\n<li>正式服务器：  <code>prod</code></li>\n<li>测试服务器：  <code>test</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>根据项目情况配置对应的 <code>mysql、redis、mongodb、rabbitmq</code>  链接</li>\n<li>拉取 <code>Jenkins</code>  打好的包，编译并启动<pre><code>cd /home/ttx/app/tomcat-deploy\nsh update-xxx-xofs-test.sh\n</code></pre>\n</li>\n<li>启动完成之后检查日志输出是否正常， <code>ctrl + c</code>  退出查看模式<pre><code>tail -fn 100 /home/ttx/app/ofs1_5/catalina/9005/logs/catalina.out\n</code></pre>\n</li>\n<li>启动成功，访问 <code>http://服务器地址:30001</code>  进行访问页面</li>\n</ul>\n<p><img data-src=\"http://img.localhostes.com/images/2019/12/23/main.png\" alt=\"jenkinsitem.png\" /><br />\n<img data-src=\"http://img.localhostes.com/images/2019/12/23/ofs.png\" alt=\"jenkinsitem.png\" /></p>\n<ul>\n<li>启动、停止、编译、重启命令<pre><code>./app_start.sh ofs1_5\n./app.stop.sh ofs1_5\n./app_deploy.sh ofs1_5\n./app_restart.sh ofs1_5\n</code></pre>\n</li>\n</ul>\n<h3 id=\"参考信息\"><a class=\"anchor\" href=\"#参考信息\">#</a> 参考信息</h3>\n<h4 id=\"系统目录\"><a class=\"anchor\" href=\"#系统目录\">#</a> 系统目录</h4>\n<pre><code>|-/\n  |- home\n    |- ttx\n      |- installer\n        |- images\n        |- compose\n      |- app\n        |- redis\n        |- mongo\n        |- mysql\n        |- rabbitMQ\n        |- tomcat-deploy\n        |- nginx\n        |- license\n        |- ofs1_5\n        |- scheduler\n        |- edi-qimen\n        |- edi-taobao\n</code></pre>\n<h4 id=\"端口分配\"><a class=\"anchor\" href=\"#端口分配\">#</a> 端口分配</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务</th>\n<th style=\"text-align:center\">端口</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">nginx</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">ofs 端口可转 80 端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mysql</td>\n<td style=\"text-align:center\">33306</td>\n<td style=\"text-align:center\">当 mysql 为通天晓安装时，必须修改端口号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mongo</td>\n<td style=\"text-align:center\">37017</td>\n<td style=\"text-align:center\">生产服务器必须设定密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rabbitMQ</td>\n<td style=\"text-align:center\">35672</td>\n<td style=\"text-align:center\">mq 连接端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rabbitMQ-management</td>\n<td style=\"text-align:center\">35673</td>\n<td style=\"text-align:center\">消息队列管理可视化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">redis</td>\n<td style=\"text-align:center\">36379</td>\n<td style=\"text-align:center\">生产服务器必须设定密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ofs</td>\n<td style=\"text-align:center\">9005</td>\n<td style=\"text-align:center\">ofs 内部端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ofs</td>\n<td style=\"text-align:center\">30001</td>\n<td style=\"text-align:center\">ofs 外部端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scheduler</td>\n<td style=\"text-align:center\">30001</td>\n<td style=\"text-align:center\">使用到计划任务组件时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">license</td>\n<td style=\"text-align:center\">30008</td>\n<td style=\"text-align:center\">仅当授权服务部署在客户服务器时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">edi</td>\n<td style=\"text-align:center\">30012-30020</td>\n<td style=\"text-align:center\">多个端口为客户部署多套 edi 保留</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "http://vayi.site/proxy/",
            "url": "http://vayi.site/proxy/",
            "title": "一个栗子搞懂代理模式",
            "date_published": "2018-11-24T14:12:30.000Z",
            "content_html": "<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<blockquote>\n<p>代理模式，为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>\n</blockquote>\n<h3 id=\"uml\"><a class=\"anchor\" href=\"#uml\">#</a> UML</h3>\n<p>&lt;img src=&quot;/img/proxy.png&quot;&gt;</p>\n<h3 id=\"三种代理模式\"><a class=\"anchor\" href=\"#三种代理模式\">#</a> 三种代理模式</h3>\n<ul>\n<li>静态代理</li>\n<li>JDK 动态代理</li>\n<li>CGLib 动态代理</li>\n</ul>\n<h2 id=\"举个栗子\"><a class=\"anchor\" href=\"#举个栗子\">#</a> 举个栗子</h2>\n<blockquote>\n<p>假设我现在想买一台 Switch，但是现在国内又买不到怎么办？那就只能找代购了，在代理模式的角度来看的话，这里的 <code>我</code> 就是 <code>真实的对象(RealSubject)</code> ， <code>代购</code> 就是一个 <code>代理对象(Proxy)</code> ， <code>买Switch</code>  就是抽象对象的行为 (Subject)</p>\n</blockquote>\n<h3 id=\"静态代理\"><a class=\"anchor\" href=\"#静态代理\">#</a> 静态代理</h3>\n<p>Subject：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 抽象对象接口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 声明需要被代理的方法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 让代理对象来帮我们买一台 Switch</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>RealSubject：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 真实对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealSubject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 我只想买一台 Switch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我只想买一台Switch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Proxy：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">*</span> 代理对象（代购）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Proxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 引用并创建真实对象实例</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">RealSubject</span> realSubject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 调用真实对象的方法，进行代理购买 Switch</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        realSubject<span class=\"token punctuation\">.</span><span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 代购进行一些额外的操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buyGameCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 顺便买一些游戏卡</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buyGameCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再顺便买一些游戏卡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Client：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 客户端调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Subject</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Result：</p>\n<pre><code class=\"language-console\">我只想买一台Switch\n再顺便买一些游戏卡\n</code></pre>\n<p>优点：方便、快捷<br />\n缺点：每一个真实对象要有一个对应的代理类，并且行为多了会比较冗余，不满足 <code>开闭原则</code></p>\n<blockquote>\n<p>开闭原则：对扩展开放，对修改关闭。</p>\n</blockquote>\n<h3 id=\"栗子延伸\"><a class=\"anchor\" href=\"#栗子延伸\">#</a> 栗子延伸</h3>\n<blockquote>\n<p>假设这个时候买了 Switch，又想玩其他的游戏。比如只狼啥的，那就得再买个 PS4，按照我们刚刚的静态代理来看的话，那就得在 <code>抽象行为对象(Subject)</code>  里面再加一个 <code>buyPS4()</code>  的方法，并且对应的对象跟代理都需要进行实现这个方法，要是再多几个其他的也就太冗余了，这个时候就得考虑是不是可以 <code>动态的进行代理</code> 了？</p>\n</blockquote>\n<h3 id=\"jdk动态代理\"><a class=\"anchor\" href=\"#jdk动态代理\">#</a> JDK 动态代理</h3>\n<p>真实对象跟抽象行为对象添加 <code>buyPS4()</code>  方法，修改抽象对象为 DynamicHandler<br />\nDynamicHandler：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * JDK 动态代理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 真实对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> targetObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建代理对象 这段也可以不在此类，也可以放在客户端里面</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> targetOjbect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetObject <span class=\"token operator\">=</span> targetOjbect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         * 创建代理对象</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * Proxy.newProxyInstance (ClassLoader loader,Class&lt;?>[] interfaces,InvocationHandler h)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         * loader：代理类的类加载器</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         * interfaces：指定代理类所实现的接口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         * h：动态代理对象在调用方法的时候，关联的 InvocationHandler 对象</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>targetOjbect<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                targetOjbect<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * InvocationHandler 接口所定义的唯一的一个方法，该方法负责集中处理动态代理类上的所有方法的调用。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 调用处理器根据这三个参数进行预处理或分派到委托类实例上执行</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param proxy  代理类的实例</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param method 代理类被调用的方法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param args   调用方法的参数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @return Object</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @throws Throwable</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 触发真实对象之前或者之后可以做一些额外操作</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method:\"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" proxy:\"</span> <span class=\"token operator\">+</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过反射执行某个类的某方法</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buyGameCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * 顺便买一些游戏卡</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buyGameCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再顺便买一些游戏卡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Client：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 客户端调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">DynamicHandler</span> dynamicHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DynamicHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">)</span> dynamicHandler<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RealSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">buyPS4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Result：</p>\n<pre><code class=\"language-console\">我只想买一台Switch\n再顺便买一些游戏卡\n我想再买一台PS4\n再顺便买一些游戏卡\n</code></pre>\n<blockquote>\n<p>疑问：为啥请求 subject 的对象会跑到 DynamicHandler 里面执行 invoke () 方法呢？</p>\n</blockquote>\n<p>源码分析：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span> loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                          <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                          <span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalArgumentException</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intfs <span class=\"token operator\">=</span> interfaces<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">SecurityManager</span> sm <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">checkProxyAccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reflection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> intfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         * 生成指定的代理类</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cl <span class=\"token operator\">=</span> <span class=\"token function\">getProxyClass0</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> intfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         * 调用代理类的构造函数</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token function\">checkNewProxyPermission</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reflection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cons <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span>constructorParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">InvocationHandler</span> ih <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrivilegedAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        cons<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> cons<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>h<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span><span class=\"token operator\">|</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Throwable</span> t <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>源码解析:<br />\ngetProxyClass (loader, interfaces) 创建代理类<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>x</mi><mi>y</mi><mn>0.</mn></mrow><annotation encoding=\"application/x-tex\">Proxy0.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">0</span><span class=\"mord\">.</span></span></span></span>Proxy0 类 实现了 Subject 接口，并继承了 Proxy 类.</p>\n<p>$Proxy0：</p>\n<pre><code class=\"language-class\">public final class $Proxy0 extends Proxy implements Subject &#123;\n    private static Method m1;\n    private static Method m3;\n    private static Method m2;\n    private static Method m4;\n    private static Method m0;\n\n    public $Proxy0(InvocationHandler var1) throws  &#123;\n        super(var1);\n    &#125;\n\n    public final boolean equals(Object var1) throws  &#123;\n        try &#123;\n            return (Boolean)super.h.invoke(this, m1, new Object[]&#123;var1&#125;);\n        &#125; catch (RuntimeException | Error var3) &#123;\n            throw var3;\n        &#125; catch (Throwable var4) &#123;\n            throw new UndeclaredThrowableException(var4);\n        &#125;\n    &#125;\n\n    public final void buySwitch() throws  &#123;\n        try &#123;\n            super.h.invoke(this, m3, (Object[])null);\n        &#125; catch (RuntimeException | Error var2) &#123;\n            throw var2;\n        &#125; catch (Throwable var3) &#123;\n            throw new UndeclaredThrowableException(var3);\n        &#125;\n    &#125;\n\n    public final String toString() throws  &#123;\n        try &#123;\n            return (String)super.h.invoke(this, m2, (Object[])null);\n        &#125; catch (RuntimeException | Error var2) &#123;\n            throw var2;\n        &#125; catch (Throwable var3) &#123;\n            throw new UndeclaredThrowableException(var3);\n        &#125;\n    &#125;\n\n    public final void buyPS4() throws  &#123;\n        try &#123;\n            super.h.invoke(this, m4, (Object[])null);\n        &#125; catch (RuntimeException | Error var2) &#123;\n            throw var2;\n        &#125; catch (Throwable var3) &#123;\n            throw new UndeclaredThrowableException(var3);\n        &#125;\n    &#125;\n\n    public final int hashCode() throws  &#123;\n        try &#123;\n            return (Integer)super.h.invoke(this, m0, (Object[])null);\n        &#125; catch (RuntimeException | Error var2) &#123;\n            throw var2;\n        &#125; catch (Throwable var3) &#123;\n            throw new UndeclaredThrowableException(var3);\n        &#125;\n    &#125;\n\n    static &#123;\n        try &#123;\n            m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, Class.forName(&quot;java.lang.Object&quot;));\n            m3 = Class.forName(&quot;design.proxy.statics.Subject&quot;).getMethod(&quot;buySwitch&quot;);\n            m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;);\n            m4 = Class.forName(&quot;design.proxy.statics.Subject&quot;).getMethod(&quot;buyPS4&quot;);\n            m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;);\n        &#125; catch (NoSuchMethodException var2) &#123;\n            throw new NoSuchMethodError(var2.getMessage());\n        &#125; catch (ClassNotFoundException var3) &#123;\n            throw new NoClassDefFoundError(var3.getMessage());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>观察 m3、m4 这两个方法，然后看对应的方法里面都会有一个 super.h.invoke () 方法，这个 <code>super.h</code>  就是我们的 <code>DynamicHandler代理对象</code></p>\n</blockquote>\n<p>步骤：<br />\nProxy.newProxyInstance 生成 $Proxy0 -&gt; $Proxy0 调用 bySwitch 方法 -&gt; DynamicHandler.invoke () -&gt; 通过反射再调用真实对象请求的方法</p>\n<h3 id=\"cglib动态代理\"><a class=\"anchor\" href=\"#cglib动态代理\">#</a> CGLib 动态代理</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MethodInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">;</span><span class=\"token comment\">// 业务类对象，供代理方法中进行真正的业务方法调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 相当于 JDK 动态代理中的绑定</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 给业务对象赋值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Enhancer</span> enhancer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建加强器，用来创建动态代理类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为加强器指定要代理的业务类（即：为下面生成的代理类指定父类）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 设置回调：对于代理类上所有方法的调用，都会调用 CallBack，而 Callback 则需要实现 intercept () 方法进行拦</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建动态代理类对象并返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> enhancer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 实现回调方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> proxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">invokeSuper</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用业务类（父类中）的方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buyGameCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 顺便买一些游戏卡</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buyGameCard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再顺便买一些游戏卡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Client：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 客户端调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">DynamicHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DynamicHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">RealSubject</span> subject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RealSubject</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RealSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">buyPS4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Result：</p>\n<pre><code class=\"language-console\">我只想买一台Switch\n再顺便买一些游戏卡\n我想再买一台PS4\n再顺便买一些游戏卡\n</code></pre>\n<p>原理跟 JDK 的类似，只不过不是继承 Proxy 了，而是通过 Enhancer 类操作节码生成代理对象来继承真实对象，然后进行方法拦截进入 DynamicHandler 的 intercept () 方法，因为是继承的真实对象所以真实的对象不能被 final 修饰。</p>\n<h3 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">·</th>\n<th style=\"text-align:center\">静态代理是</th>\n<th style=\"text-align:center\">JDK 动态代理</th>\n<th style=\"text-align:center\">CGLib 动态代理</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">优点</td>\n<td style=\"text-align:center\">方便、快，适合代理对象比较少的场景</td>\n<td style=\"text-align:center\">易扩展，适合代理对象比较多得场景</td>\n<td style=\"text-align:center\">易扩展，比反射调用方法快一点，没有太大的性能问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">缺点</td>\n<td style=\"text-align:center\">不好扩展，违反开闭原则</td>\n<td style=\"text-align:center\">必须提供接口，并且因为通过反射来调用方法，消耗性能</td>\n<td style=\"text-align:center\">ASM 操作生成类比较慢，真实对象不能为 final</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"aop中的应用\"><a class=\"anchor\" href=\"#aop中的应用\">#</a> AOP 中的应用</h2>\n<h3 id=\"aop中的一些术语\"><a class=\"anchor\" href=\"#aop中的一些术语\">#</a> AOP 中的一些术语</h3>\n<ul>\n<li>1. 通知 (Advice):<br />\n 通知定义了切面是什么以及何时使用。描述了切面要完成的工作和何时需要执行这个工作。</li>\n<li>2. 连接点 (Joinpoint):<br />\n 程序能够应用通知的一个 “时机”，这些 “时机” 就是连接点，例如方法被调用时、异常被抛出时等等。</li>\n<li>3. 切入点 (Pointcut)<br />\n 通知定义了切面要发生的 “故事” 和时间，那么切入点就定义了 “故事” 发生的地点，例如某个类或方法的名称，spring 中允许我们方便的用正则表达式来指定</li>\n<li>4. 切面 (Aspect)<br />\n 通知和切入点共同组成了切面：时间、地点和要发生的 “故事”</li>\n<li>5. 引入 (Introduction)<br />\n 引入允许我们向现有的类添加新的方法和属性 (Spring 提供了一个方法注入的功能）</li>\n<li>6. 目标 (Target)<br />\n 即被通知的对象，如果没有 AOP, 那么它的逻辑将要交叉别的事务逻辑，有了 AOP 之后它可以只关注自己要做的事（AOP 让他做爱做的事）</li>\n<li>7. 代理 (proxy)<br />\n 应用通知的对象，详细内容参见设计模式里面的代理模式</li>\n<li>8. 织入 (Weaving)<br />\n 把切面应用到目标对象来创建新的代理对象的过程，织入一般发生在如下几个时机:<br />\n(1) 编译时：当一个类文件被编译时进行织入，这需要特殊的编译器才可以做的到，例如 AspectJ 的织入编译器<br />\n (2) 类加载时：使用特殊的 ClassLoader 在目标类被加载到程序之前增强类的字节代码<br />\n (3) 运行时：切面在运行的某个时刻被织入，SpringAOP 就是以这种方式织入切面的，原理应该是使用了 JDK 的动态代理技术</li>\n</ul>\n<h3 id=\"拼多多版本aop\"><a class=\"anchor\" href=\"#拼多多版本aop\">#</a> 拼多多版本 AOP</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 前置增强</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeforeAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 后置增强</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AfterAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后以 JDK 的动态代理为例子修改一下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * JDK 动态代理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 真实对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> targetObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 前值增强</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BeforeAdvice</span> beforeAdvice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 后置增强</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AfterAdvice</span> afterAdvice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BeforeAdvice</span> <span class=\"token function\">getBeforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> beforeAdvice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBeforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeforeAdvice</span> beforeAdvice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beforeAdvice <span class=\"token operator\">=</span> beforeAdvice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AfterAdvice</span> <span class=\"token function\">getAfterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> afterAdvice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAfterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AfterAdvice</span> afterAdvice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>afterAdvice <span class=\"token operator\">=</span> afterAdvice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 创建代理对象 这段也可以不在此类，也可以放在客户端里面</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> targetOjbect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetObject <span class=\"token operator\">=</span> targetOjbect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         * 创建代理对象</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         * Proxy.newProxyInstance (ClassLoader loader,Class&lt;?>[] interfaces,InvocationHandler h)</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         * loader：代理类的类加载器</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         * interfaces：指定代理类所实现的接口</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         * h：动态代理对象在调用方法的时候，关联的 InvocationHandler 对象</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>targetOjbect<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                targetOjbect<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * InvocationHandler 接口所定义的唯一的一个方法，该方法负责集中处理动态代理类上的所有方法的调用。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * 调用处理器根据这三个参数进行预处理或分派到委托类实例上执行</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * @param proxy  代理类的实例</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * @param method 代理类被调用的方法</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param args   调用方法的参数</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @return Object</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @throws Throwable</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 触发真实对象之前或者之后可以做一些额外操作</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>beforeAdvice <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            beforeAdvice<span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetObject<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过反射执行某个类的某方法</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>afterAdvice <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            afterAdvice<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Client：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 客户端调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">DynamicHandler</span> dynamicHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DynamicHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">)</span> dynamicHandler<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RealSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        dynamicHandler<span class=\"token punctuation\">.</span><span class=\"token function\">setBeforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"听说任天堂出了一款不错的游戏，所以。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        dynamicHandler<span class=\"token punctuation\">.</span><span class=\"token function\">setAfterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AfterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再买点游戏卡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">buySwitch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Result：</p>\n<pre><code class=\"language-console\">听说任天堂出了一款不错的游戏，所以。。。\n我只想买一台Switch\n再买点游戏卡\n</code></pre>\n<p>这里我们只是简单的表明了一下前后通知配合动态代理的使用，真正的 AOP 涉及到切入点、切面什么时候织入等等。。想要了解的同学可以自行后续去研究，这里主要就是突出代理模式的应用。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<blockquote>\n<p>讲完这个栗子，总结一下，代理模式在 Java 中主要用于系统的解耦，如同中介机构，可以为目标类提供代理服务，以控制对对象的访问，目标类的任何方法在执行前都必须经过代理类，这样代理类就可以用来负责请求的预处理、过滤、将请求分派给目标类处理、以及目标类执行完请求后的后续处理。</p>\n</blockquote>\n",
            "tags": [
                "设计模式",
                "设计模式"
            ]
        },
        {
            "id": "http://vayi.site/singleton/",
            "url": "http://vayi.site/singleton/",
            "title": "一个栗子搞懂单例模式",
            "date_published": "2018-10-06T13:02:41.000Z",
            "content_html": "<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<blockquote>\n<p>单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</p>\n</blockquote>\n<h3 id=\"三种单例模式\"><a class=\"anchor\" href=\"#三种单例模式\">#</a> 三种单例模式</h3>\n<ul>\n<li>饿汉式</li>\n</ul>\n<blockquote>\n<p>系统加载时初始化实例，即使不加载也会初始化，占用内存较大，线程安全</p>\n</blockquote>\n<ul>\n<li>懒汉式</li>\n</ul>\n<blockquote>\n<p>系统加载不初始化，需要加载实例时再初始化实例，线程不安全，加了双重检查之后线程安全</p>\n</blockquote>\n<ul>\n<li>枚举</li>\n</ul>\n<blockquote>\n<p>JDK1.5 加入的，也算是最推荐使用的方法，兼顾内存跟线程安全</p>\n</blockquote>\n<h2 id=\"举个栗子\"><a class=\"anchor\" href=\"#举个栗子\">#</a> 举个栗子</h2>\n<h3 id=\"懒汉式\"><a class=\"anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 单例模式 (饿汉式)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HungerSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 杜绝外面直接 new 只有一种获取方式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HungerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 实例化</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HungerSingleton</span> <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HungerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 获取实例</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HungerSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优点：单例占用内存比较小，初始化时就会被用到的情况。</li>\n<li>缺点：单例占用的内存比较大，或单例只是在某个特定场景下才会用到</li>\n</ul>\n<h3 id=\"懒汉式-2\"><a class=\"anchor\" href=\"#懒汉式-2\">#</a> 懒汉式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 单例模式 (懒汉式)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 杜绝外面直接 new 只有一种获取方式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 实例化</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 获取实例</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优点：内存节省，由于此种模式的实例实在需要时创建，如果某次的程序运行没有用到，就是可以节省内存</li>\n<li>缺点：线程不安全，分析见下面问题</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 单例模式 (懒汉式)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 杜绝外面直接 new 只有一种获取方式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 实例化</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 获取实例（双重检查）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>优点：多线程安全</p>\n</li>\n<li>\n<p>缺点：执行效率低，每个线程在想获得类的实例时候，执行 getInstance () 方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低要改进。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 枚举是天然单例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优点：兼顾内存和多线程安全</li>\n<li>缺点：为啥没有早点遇到你（1.5 版本之后更新）</li>\n</ul>\n<h2 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h2>\n<blockquote>\n<p>为什么要考虑线程安全？</p>\n</blockquote>\n<h3 id=\"举个栗子懒汉式非双重检查\"><a class=\"anchor\" href=\"#举个栗子懒汉式非双重检查\">#</a> 举个栗子（懒汉式非双重检查）</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">步骤</th>\n<th style=\"text-align:center\">线程 1</th>\n<th style=\"text-align:center\">线程 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">getInstance()</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">getInstance()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">if (INSTANCE == null)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">if (INSTANCE == null)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">INSTANCE = new Singleton();</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">return INSTANCE;</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">INSTANCE = new Singleton();</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">return INSTANCE;</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里就发生的线程安全的问题，1、2 两个步骤分别由线程 1、2 进入 getInstance () 的方法，然后 3、4 两个步骤同时通过，因为这个时候确实还没有实例化为 null，所以后面就会线程 1 <code>new</code>  一个，线程 2 也 new 一个 INSTANCE，这样就违背了单例的原则，所以考虑线程安全还是有必要的。</p>\n</blockquote>\n",
            "tags": [
                "设计模式",
                "设计模式"
            ]
        },
        {
            "id": "http://vayi.site/MYSQL_LOCK/",
            "url": "http://vayi.site/MYSQL_LOCK/",
            "title": "MYSQL锁以及死锁的产生跟解决",
            "date_published": "2018-08-17T15:22:59.000Z",
            "content_html": "<h3 id=\"innodb\"><a class=\"anchor\" href=\"#innodb\">#</a> InnoDB</h3>\n<blockquote>\n<p>MySQL InnoDB 存储引擎，实现的是基于多版本的并发控制协议 ——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTXVsdGl2ZXJzaW9uX2NvbmN1cnJlbmN5X2NvbnRyb2w=\">MVCC</span> (Multi-Version Concurrency Control)</p>\n</blockquote>\n<blockquote>\n<p>在 MVCC 并发控制中，读操作可以分成两类：<br />\n快照读 (snapshot read) 与当前读 (current read)。<br />\n快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。<br />\n当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p>\n</blockquote>\n<blockquote>\n<p>快照读</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ?<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>当前读</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>…<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">update</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">set</span> ? <span class=\"token keyword\">where</span> ?<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ?<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。<br />\n其中，除了第一条语句，对读取记录加 S 锁 (共享锁) 外，其他的操作，都加的是 X 锁 (排它锁)。</p>\n</blockquote>\n<h4 id=\"innodb锁类型\"><a class=\"anchor\" href=\"#innodb锁类型\">#</a> InnoDB 锁类型</h4>\n<h5 id=\"x锁-or-s锁\"><a class=\"anchor\" href=\"#x锁-or-s锁\">#</a> X 锁 or S 锁</h5>\n<p>在 InnoDb 中实现了两个标准的行级锁，可以简单的看为两个读写锁:</p>\n<blockquote>\n<ul>\n<li>S - 共享锁：又叫读锁，其他事务可以继续加共享锁，但是不能继续加排他锁。</li>\n<li>X - 排他锁：又叫写锁，一旦加了写锁之后，其他事务就不能加锁了。</li>\n</ul>\n</blockquote>\n<p>兼容性：是指事务 A 获得一个某行某种锁之后，事务 B 同样的在这个行上尝试获取某种锁，如果能立即获取，则称锁兼容，反之叫冲突。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">.</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"意向锁\"><a class=\"anchor\" href=\"#意向锁\">#</a> 意向锁</h5>\n<p>意向锁在 InnoDB 中是表级锁，和他的名字一样他是用来表达一个事务想要获取什么。意向锁分为:</p>\n<blockquote>\n<ul>\n<li>IS - 意向共享锁 (lock in share mode): 表达一个事务想要获取一张表中某几行的共享锁。</li>\n<li>IX - 意向排他锁 (for update): 表达一个事务想要获取一张表中某几行的排他锁。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>这个锁有什么用呢？为什么需要这个锁呢？<br />\n首先说一下如果没有这个锁，如果要给这个表加上表锁，一般的做法是去遍历每一行看看他是否有行锁，这样的话效率太低。<br />\n而我们有意向锁，只需要判断是否有意向锁即可，不需要再去一行行的去扫描。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">.</th>\n<th style=\"text-align:center\">IX</th>\n<th style=\"text-align:center\">IS</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IX</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IS</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：意向锁之间兼容，排它锁（包含意向）跟共享锁冲突，共享锁（包含意向）之间是兼容的</strong></p>\n<h5 id=\"间隙锁gap锁\"><a class=\"anchor\" href=\"#间隙锁gap锁\">#</a> 间隙锁 (gap 锁)</h5>\n<p>&lt;img src=&quot;/img/lock/gap.png&quot;&gt;</p>\n<blockquote>\n<p>间隙锁顾名思义锁间隙，不锁记录。锁间隙的意思就是锁定某一个范围，间隙锁又叫 gap 锁，其不会阻塞其他的 gap 锁，但是会阻塞插入间隙锁，这也是用来防止幻读的关键。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">where 条件</th>\n<th style=\"text-align:center\">定位条件</th>\n<th style=\"text-align:center\">终止条件</th>\n<th style=\"text-align:center\">加锁范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ID &lt; X</td>\n<td style=\"text-align:center\">infinum</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">(infinum,X]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ID &lt;= X</td>\n<td style=\"text-align:center\">infinum</td>\n<td style=\"text-align:center\">X 的下一条记录</td>\n<td style=\"text-align:center\">(infinum,X 的下一条记录]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ID &gt; X</td>\n<td style=\"text-align:center\">X 的下一条记录</td>\n<td style=\"text-align:center\">maxnum</td>\n<td style=\"text-align:center\">(X,maxnum]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ID &gt;= X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">maxnum</td>\n<td style=\"text-align:center\">[X,maxnum]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"事务隔离级别\"><a class=\"anchor\" href=\"#事务隔离级别\">#</a> 事务隔离级别</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%isolation%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>Read Uncommited：可以读取未提交记录。此隔离级别，不会使用，忽略。</li>\n<li>Read Committed (RC)：针对当前读，RC 隔离级别保证对读取到的记录加锁 (记录锁)，存在幻读现象。</li>\n<li>Repeatable Read (RR)：针对当前读，RR 隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，不存在幻读现象。</li>\n<li>Serializable：Serializable 隔离级别下，读写冲突，因此并发度急剧下降，在 MySQL/InnoDB 下不建议使用。</li>\n</ul>\n</blockquote>\n<h4 id=\"查看当前锁的状态\"><a class=\"anchor\" href=\"#查看当前锁的状态\">#</a> 查看当前锁的状态</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span>INNODB_LOCKS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Column</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lock_id</td>\n<td style=\"text-align:center\">锁 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_trx_id</td>\n<td style=\"text-align:center\">事务 ID, 可以连 INNODB_TRX 表查事务详情</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_mode</td>\n<td style=\"text-align:center\">锁的模式： S, X, IS, IX, S_GAP, X_GAP, IS_GAP, IX_GAP, or AUTO_INC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_type</td>\n<td style=\"text-align:center\">锁的类型：行级锁 或者表级锁</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_table</td>\n<td style=\"text-align:center\">加锁的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_index</td>\n<td style=\"text-align:center\">如果是 lock_type='RECORD' 行级锁，为锁住的索引，如果是表锁为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_space</td>\n<td style=\"text-align:center\">如果是 lock_type='RECORD' 行级锁，为锁住对象的 Tablespace ID，如果是表锁为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_page</td>\n<td style=\"text-align:center\">如果是 lock_type='RECORD' 行级锁，为锁住页号，如果是表锁为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_rec</td>\n<td style=\"text-align:center\">如果是 lock_type='RECORD' 行级锁，为锁住页号，如果是表锁为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_data</td>\n<td style=\"text-align:center\">事务锁住的主键值，若是表锁，则该值为 null</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一句简单的加锁分析\"><a class=\"anchor\" href=\"#一句简单的加锁分析\">#</a> 一句简单的加锁分析</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQL1：<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SQL2：<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"前提\"><a class=\"anchor\" href=\"#前提\">#</a> 前提</h4>\n<blockquote>\n<ul>\n<li>前提一：当前系统的隔离级别是什么？</li>\n<li>前提二：id 列是不是主键？</li>\n<li>前提三：id 列如果不是主键，那么 id 列上有索引吗？</li>\n<li>前提四：id 列上如果有二级索引，那么这个索引是唯一索引吗？</li>\n</ul>\n</blockquote>\n<h4 id=\"常用组合\"><a class=\"anchor\" href=\"#常用组合\">#</a> 常用组合</h4>\n<blockquote>\n<ul>\n<li>组合一：id 列是主键，RC 隔离级别</li>\n<li>组合二：id 列是二级唯一索引，RC 隔离级别</li>\n<li>组合三：id 列是二级非唯一索引，RC 隔离级别</li>\n<li>组合四：id 列上没有索引，RC 隔离级别</li>\n<li>组合五：id 列是主键，RR 隔离级别</li>\n<li>组合六：id 列是二级唯一索引，RR 隔离级别</li>\n<li>组合七：id 列是二级非唯一索引，RR 隔离级别</li>\n<li>组合八：id 列上没有索引，RR 隔离级别</li>\n<li>组合九：Serializable 隔离级别</li>\n</ul>\n</blockquote>\n<h4 id=\"分析常用组合\"><a class=\"anchor\" href=\"#分析常用组合\">#</a> 分析常用组合</h4>\n<h5 id=\"组合一\"><a class=\"anchor\" href=\"#组合一\">#</a> 组合一</h5>\n<p>&lt;img src=&quot;/img/lock/medish.jpg&quot;&gt;</p>\n<blockquote>\n<p>主键为 id, 隔离级别是 RC，只需要在主键上加 <code>X锁</code> 。</p>\n</blockquote>\n<h5 id=\"组合二\"><a class=\"anchor\" href=\"#组合二\">#</a> 组合二</h5>\n<p>&lt;img src=&quot;/img/lock/medish2.jpg&quot;&gt;</p>\n<blockquote>\n<p>id 为唯一索引，假设主键为 name, 隔离级别是 RC。由于 id 是 unique 索引，因此 delete 语句会选择走 id 列的索引进行 where 条件的过滤，<br />\n在找到 id=10 的记录后，首先会将 unique 索引上的 id=10 索引记录加上 X 锁，同时，会根据读取到的 name 列，回主键索引 (聚簇索引)，<br />\n然后将聚簇索引上的 name = 'd' 对应的主键索引项加 <code>X锁</code> 。</p>\n</blockquote>\n<p>问题：为什么聚簇索引上的记录也要加锁？</p>\n<blockquote>\n<p>如果并发的一个 SQL，是通过主键索引来更新： <code>update t1 set id = 100 where name = 'd';</code> <br />\n 此时，如果 delete 语句没有将主键索引上的记录加锁，那么并发的 update 就会感知不到 delete 语句的存在，<br />\n违背了同一记录上的更新 / 删除需要串行执行的约束。</p>\n</blockquote>\n<h5 id=\"组合三\"><a class=\"anchor\" href=\"#组合三\">#</a> 组合三</h5>\n<p>&lt;img src=&quot;/img/lock/medish3.jpg&quot;&gt;</p>\n<blockquote>\n<p>id 为非唯一索引，隔离级别是 RC, 相对于组合一、二，组合三又发生了变化，id 列上的约束又降低了，id 列不再唯一，只有一个普通的索引。<br />\n首先，id 列索引上，满足 id = 10 查询条件的记录，均已加锁。同时，这些记录对应的主键索引上的记录也都加上了锁。<br />\n与组合二唯一的区别在于，组合二最多只有一个满足等值查询的记录，而组合三会将所有满足查询条件的记录都加锁。</p>\n</blockquote>\n<h5 id=\"组合四\"><a class=\"anchor\" href=\"#组合四\">#</a> 组合四</h5>\n<p>&lt;img src=&quot;/img/lock/medish4.jpg&quot;&gt;</p>\n<blockquote>\n<p>id 无索引，隔离级别是 RC, 由于 id 列上没有索引，因此只能走聚簇索引，进行全部扫描。<br />\n从图中可以看到，满足删除条件的记录有两条，但是，聚簇索引上所有的记录，都被加上了 X 锁。<br />\n无论记录是否满足条件，全部被加上 X 锁。既不是加表锁，也不是在满足条件的记录上加行锁。</p>\n</blockquote>\n<h5 id=\"组合五-组合一\"><a class=\"anchor\" href=\"#组合五-组合一\">#</a> 组合五 = 组合一</h5>\n<h5 id=\"组合六-组合二\"><a class=\"anchor\" href=\"#组合六-组合二\">#</a> 组合六 = 组合二</h5>\n<h5 id=\"组合七\"><a class=\"anchor\" href=\"#组合七\">#</a> 组合七</h5>\n<p>&lt;img src=&quot;/img/lock/medish5.jpg&quot;&gt;</p>\n<blockquote>\n<p>id 为非唯一索引，隔离级别是 RR, 首先，通过 id 索引定位到第一条满足查询条件的记录，加记录上的 X 锁，加 GAP 锁，然后加主键聚簇索引上的记录 X 锁，然后返回；<br />\n然后读取下一条，重复进行。直至进行到第一条不满足条件的记录，此时，不需要加记录 X 锁，但是仍旧需要加 GAP 锁，最后返回结束。</p>\n</blockquote>\n<h5 id=\"组合八\"><a class=\"anchor\" href=\"#组合八\">#</a> 组合八</h5>\n<p>&lt;img src=&quot;/img/lock/medish6.jpg&quot;&gt;</p>\n<blockquote>\n<p>如图，这是一个很恐怖的现象。首先，聚簇索引上的所有记录，都被加上了 X 锁。其次，聚簇索引每条记录间的间隙 (GAP)，也同时被加上了 GAP 锁。这个示例表，只有 6 条记录，一共需要 6 个记录锁，7 个 GAP 锁。试想，如果表上有 1000 万条记录呢？<br />\n在这种情况下，这个表上，除了不加锁的快照度，其他任何加锁的并发 SQL，均不能执行，不能更新，不能删除，不能插入，全表被锁死。<br />\n所以在 Repeatable Read 隔离级别下，如果进行全表扫描的当前读，那么会锁上表中的所有记录，同时会锁上聚簇索引内的所有 GAP，杜绝所有的并发 更新 / 删除 / 插入 操作。</p>\n</blockquote>\n<h5 id=\"组合九\"><a class=\"anchor\" href=\"#组合九\">#</a> 组合九</h5>\n<blockquote>\n<p>Serializable 隔离级别，影响的是 <code>SQL1：select * from t1 where id = 10;</code>  这条 SQL。<br />\n在 RC，RR 隔离级别下，都是快照读，不加锁。但是在 Serializable 隔离级别，SQL1 会加读锁，也就是说快照读不复存在。<br />\n在 MySQL/InnoDB 中，所谓的读不加锁，并不适用于所有的情况，而是隔离级别相关的。Serializable 隔离级别，读不加锁就不再成立，所有的读操作，都是当前读。</p>\n</blockquote>\n<h3 id=\"举个栗子\"><a class=\"anchor\" href=\"#举个栗子\">#</a> 举个栗子</h3>\n<h4 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h4>\n<p>&lt;img src=&quot;/img/lock/dead.png&quot;&gt;</p>\n<blockquote>\n<p>死锁：是指两个或两个以上的事务在执行过程中，因争夺资源而造成的一种互相等待的现象。<br />\n说明有等待才会有死锁，解决死锁可以通过去掉等待，比如回滚事务。<br />\n如果出现回滚，通常来说 InnoDB 会选择回滚权重较小的事务，也就是 <code>undo</code>  较小的事务。</p>\n</blockquote>\n<blockquote>\n<p>假设我们有一个用户表，然后插入几条数据：</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>user<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8mb4 <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>comment<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8 <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>index_name<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8mb4_bin<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">select</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">333</span><span class=\"token punctuation\">,</span><span class=\"token number\">333</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">select</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">555</span><span class=\"token punctuation\">,</span><span class=\"token number\">555</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">select</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span><span class=\"token number\">999</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>然后我们开启事务  <code>A</code>  跟 事务 <code>B</code> ：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事件点</th>\n<th style=\"text-align:center\">事务 A</th>\n<th style=\"text-align:center\">事务 B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">begin;</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">begin;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">delete from user where name = '777';</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">delete from user where name = '666';</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">insert user select 26,'666','666';</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">insert user select 27,'777','777';</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Query OK, 1 row affected (14.32 sec) Records: 1 Duplicates: 0 Warnings: 0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>可以看见事务 A 出现被回滚了，而事务 B 成功执行。 具体每个时间点发生了什么呢？</strong></p>\n<blockquote>\n<ul>\n<li>时间点 3：事务 A 删除需要对 777 这个索引加上 X 锁，但是其不存在，所以只对 555-999 之间加间隙锁</li>\n<li>时间点 4：同理事务 B 也对 555-999 之间加间隙锁。间隙锁之间是兼容的，所以正常执行，此时两边都有一个间隙锁</li>\n<li>时间点 5：事务 B，执行 Insert 操作，首先插入意向锁，但是 555-999 之间有间隙锁，由于插入意向锁和间隙锁冲突，事务 B 阻塞，等待事务 A 释放间隙锁</li>\n<li>时间点 6：事务 A 同理，等待事务 B 释放间隙锁。于是出现了 A-&gt;B,B-&gt;A 回路等待。</li>\n<li>时间点 7：事务管理器检查到死锁选择回滚事务 A</li>\n<li>时间点 8：事务 B 插入操作执行成功。</li>\n</ul>\n</blockquote>\n<p>&lt;img src=&quot;/img/lock/deadlock.png&quot;&gt;</p>\n<h4 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h4>\n<blockquote>\n<ul>\n<li>方案一：隔离级别降级为 RC，在 RC 级别下不会加入间隙锁，所以就不会出现毛病了，但是在 RC 级别下会出现幻读，可提交读都破坏隔离性的毛病，所以这个方案不行。</li>\n<li>方案二：较少的修改代码逻辑，在删除之前，可以通过快照查询 (不加锁)，如果查询没有结果，则直接插入，如果有通过主键进行删除，在之前第三节实验 2 中，通过唯一索引会降级为记录锁，所以不存在间隙锁。</li>\n</ul>\n</blockquote>\n<h4 id=\"防止死锁\"><a class=\"anchor\" href=\"#防止死锁\">#</a> 防止死锁</h4>\n<blockquote>\n<ul>\n<li>以固定的顺序访问表和行。交叉访问更容易造成事务等待回路。</li>\n<li>尽量避免大事务，占有的资源锁越多，越容易出现死锁。建议拆成小事务。</li>\n<li>降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从 RR 调整为 RC，可以避免掉很多因为 gap 锁造成的死锁。</li>\n<li>为表添加合理的索引。防止没有索引出现表锁，出现的死锁的概率会突增。</li>\n</ul>\n</blockquote>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>做一个简单的总结，要做的完全掌握 MySQL/InnoDB 的加锁规则，甚至是其他任何数据库的加锁规则，需要具备以下的一些知识点：</p>\n<blockquote>\n<ul>\n<li>了解数据库的一些基本理论知识：数据的存储格式 (堆组织表 vs 聚簇索引表)；并发控制协议 (MVCC vs Lock-Based CC)；Two-Phase Locking；数据库的隔离级别定义 (Isolation Level)；</li>\n<li>了解 SQL 本身的执行计划 (主键扫描 vs 唯一键扫描 vs 范围扫描 vs 全表扫描)；</li>\n<li>了解数据库本身的一些实现细节 (过滤条件提取；Index Condition Pushdown；Semi-Consistent Read)；</li>\n<li>了解死锁产生的原因及分析的方法 (加锁顺序不一致；分析每个 SQL 的加锁顺序)</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "MYSQL",
                "MYSQL"
            ]
        },
        {
            "id": "http://vayi.site/restructure/",
            "url": "http://vayi.site/restructure/",
            "title": "重构 (附源码)",
            "date_published": "2018-08-02T08:46:00.000Z",
            "content_html": "<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<p><strong>个人理解</strong>：<em>计算机理解代码很简单，因为不管你怎么写终究会编译成字节码，所以重构的定义简单点来说就是让你写的代码能让其他人看懂。</em></p>\n<p><strong>定义（《重构》作者）</strong>：<em>对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。</em></p>\n<h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<p>代码大家都知道怎么写，多余的也不多说了，直接上干 (dao) 货 (ban) 实例非常简单，这是一个影片出租店用的程序，计算每一位顾客的消费金额并打印详单。<br />\n操作者告诉程序：租客租了那些影片、租期多长，程序便根据租赁时间和影片类型来算出费用。</p>\n<p>影片（Movie）分三类：常规片、儿童片、新片，出了计算费用还需要为常客计算积分，积分会根据租的影片种类是否为新片会有所不同。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 影片</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author vayi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2018/7/30</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @since 0.0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> regular <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 常规片</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> new_release <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新片</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childrens <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 儿童片</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> priceCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priceCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priceCode <span class=\"token operator\">=</span> priceCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPriceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> priceCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPriceCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> priceCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priceCode <span class=\"token operator\">=</span> priceCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 租赁</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author vayi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2018/7/30</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @since 0.0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rental</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 租的电影</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> dayRented<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 租的时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rental</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dayRented<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>movie <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dayRented <span class=\"token operator\">=</span> dayRented<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Movie</span> <span class=\"token function\">getMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> dayRented<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 消费者</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author vayi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2018/7/30</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @since 0.0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Vector</span> rentals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存租的影片</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addRental</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rental</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        rentals<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">double</span> totalAmount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> frequentRenterPoints <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Enumeration</span> rentalss <span class=\"token operator\">=</span> rentals<span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"RentalNew Record for\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rentalss<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">double</span> thisAmount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Rental</span> each <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rental</span><span class=\"token punctuation\">)</span> rentalss<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span><span class=\"token function\">getMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPriceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">.</span>regular<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    thisAmount <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span><span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        thisAmount <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span><span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">.</span>new_release<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    thisAmount <span class=\"token operator\">+=</span> each<span class=\"token punctuation\">.</span><span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">.</span>childrens<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    thisAmount <span class=\"token operator\">+=</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span><span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        thisAmount <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span><span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 积分  每借一张加 1 个积分</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            frequentRenterPoints<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">// 积分累加条件  新版本的片子，借的时间大于 1 天</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span><span class=\"token function\">getMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPriceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">.</span>new_release<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> each<span class=\"token punctuation\">.</span><span class=\"token function\">getDayRented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                frequentRenterPoints<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            result <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> each<span class=\"token punctuation\">.</span><span class=\"token function\">getMovie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>thisAmount<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            totalAmount <span class=\"token operator\">+=</span> thisAmount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        result <span class=\"token operator\">+=</span> <span class=\"token string\">\"Amount owed is \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>totalAmount<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        result <span class=\"token operator\">+=</span> <span class=\"token string\">\"You earned \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>frequentRenterPoints<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"frequent renter points\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Customer 里的 statement () 方法就是生成详单的函数，也是我们本次重构的入口。那重构之前我们先思考几个问题，你第一眼看到这个 statement () 方法的时候是怎么想的？<br />\n首先肯定会说它设计不好，因为没有面向对象实思想，并且后期维护起来也很费人力。<br />\n<strong>假如我们的用户需求有修改，不是打印 txt 这种格式的文本，而是输出 Json 或者 Html 格式的内容的话</strong>，你会发现很难修改，然后往往就是复制一份，接着改改改，编译通过，能跑就 ok 了<br />\n这样确实可以，<strong> 但如果计费的标准也发生变化了呢？</strong>, 那这个时候你得同时修改两个方法，<br />\n 并且还要保证两处修改的一致性，如果后续还需要修改的话就会越积累越多，CV 大法的问题就浮现出来了，所以这个时候就需要重构来拯救了。（越早重构越好，没事的时候就看看代码还能不能重构）</p>\n<p>注：如果你发现自己需要为程序添加一个特性，而代码结构让你没法很方便的添加的时候，那么就先<br />\n重构这个程序，使特性可以很方便的添加了再添加特性</p>\n<h4 id=\"开始\"><a class=\"anchor\" href=\"#开始\">#</a> 开始</h4>\n<p>首先开始之前给大家看看同一段代码重构前后的对比<br />\n &lt;img src=&quot;/img/restructure/restruct.png&quot;&gt;</p>\n<p>代码量少了 80% 左右，并且结构更清晰了，可扩展性更好，耦合性更低了</p>\n<h4 id=\"重构第一步\"><a class=\"anchor\" href=\"#重构第一步\">#</a> 重构第一步</h4>\n<p>建立测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author vayi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2018/7/30</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @since 0.0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> test01 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================重构前结果=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Movie</span> mov <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Rental</span> ren <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rental</span><span class=\"token punctuation\">(</span>mov<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Customer</span> cus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cheng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cus<span class=\"token punctuation\">.</span><span class=\"token function\">addRental</span><span class=\"token punctuation\">(</span>ren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cus<span class=\"token punctuation\">.</span><span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================重构前结果=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================重构后结果=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">MovieNew</span> newMov <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MovieNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">RentalNew</span> newRen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RentalNew</span><span class=\"token punctuation\">(</span>newMov<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">CustomerNew</span> cusNew <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomerNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cheng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        cusNew<span class=\"token punctuation\">.</span><span class=\"token function\">addRentalNew</span><span class=\"token punctuation\">(</span>newRen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cusNew<span class=\"token punctuation\">.</span><span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================重构后结果=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>切记：重构第一步先建立相应部分的测试类，一定不能影响原来结果的运行，并且重构一块的时候<br />\n就需要测试一次，看结果是否一致。</p>\n<h4 id=\"分解并重组statement\"><a class=\"anchor\" href=\"#分解并重组statement\">#</a> 分解并重组 statement ()</h4>\n<p>首先我们需要找到重构部分的逻辑泥团，很明显 statement () 里面的逻辑泥团就是这个 switch 语句，那我们就把这个地方单独提出一个函数来进行计算，<br />\n 首先找出这个函数内部的局部变量跟参数，我们可以找到一个是 each 一个是 thisAmount, 前者并没有被修改，后者会被修改，所以这里我们尽量把不用修改的当参数传递进去，<br />\n 如果是会被修改的当参数就要认真考虑是否可行了，如果只有一个变量会被修改，那我们可以把它当作返回值</p>\n<p>&lt;img src=&quot;/img/restructure/amountFor.png&quot;&gt;</p>\n<p>直接用 IDEA 的话可以用 <strong>CTRL+ALT+M</strong> 组合键来提取选中的内容为方法<br />\n然后我们也把函数内的变量名修改下，增加可阅读性，同样是可以用快捷键来修改变量名 <strong>SHIFT+F6</strong></p>\n<p>&lt;img src=&quot;/img/restructure/changeName.png&quot;&gt;</p>\n<p>每次重构完一部分，哪怕很小的一部分也要先测试一遍，只有编译测试通过了才可以进行下一步的重构<br />\n我们继续看这个提取出来的 amountFor () 函数，发现里面只用到了 Rental 类相关的操作，但是却并没有 Customer 类的操作，<br />\n 所以我们怀疑这里是不是放错了位置，我们把 amountFor 移动到 Rental 里面，顺便方法名也改为 getCharge (), 同样的移动方法也有快捷键: <strong>F6</strong></p>\n<p>&lt;img src=&quot;/img/restructure/getCharge.png&quot;&gt;</p>\n<p>这里就先对 getCharge 的操作到此为止了，我们再回到 statement () 函数来<br />\n这个时候我们已经把 switch 提取出来了，我们可以看到 thisAmount 这个变量接收一次 getCharge 的结果之后就没有改变了<br />\n那么我们完全可以直接用 getCharge 来替代它</p>\n<p>&lt;img src=&quot;/img/restructure/removeAmount.png&quot;&gt;</p>\n<p>同样的，重构完之后编译测试一次，保证自己没有破坏任何东西<br />\n然后回到我们的 statement () 函数，发现我们的积分计算也跟 Rental 有关，所以我们可以直接放到 Rental 类里面去<br />\n由于这里的积分变量 frequentRenterPoints 有了初始值，并且是用来统计的，所以我们不用当参数传递进去直接接收返回值进行累加就可以了</p>\n<p>&lt;img src=&quot;/img/restructure/getFre.png&quot;&gt;<br />\n&lt;img src=&quot;/img/restructure/getFrequentRenterPoints.png&quot;&gt;</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1lpYWljaGVuL2phdmFEZW1vL3RyZWUvbWFzdGVyL2phdmFEZW1v\">源码地址</span><br />\n重构部分的源码在 restructure 目录下，还有一些其他 demo, 大家可自行学习</p>\n",
            "tags": [
                "Java",
                "Java",
                "重构"
            ]
        },
        {
            "id": "http://vayi.site/semaphore/",
            "url": "http://vayi.site/semaphore/",
            "title": "Semaphore深入浅出",
            "date_published": "2018-05-15T15:22:59.000Z",
            "content_html": "<h3 id=\"1-semaphore定义\"><a class=\"anchor\" href=\"#1-semaphore定义\">#</a> 1. Semaphore 定义</h3>\n<p><strong>个人理解</strong>：<em>同一时间内，限制指定数量线程通过</em></p>\n<h3 id=\"2-semaphore的同步性\"><a class=\"anchor\" href=\"#2-semaphore的同步性\">#</a> 2. Semaphore 的同步性</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hc<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>chapterOne<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SemaPhore</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 同一时间内  限制多个线程通过</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SemaPhoreT</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Semaphore</span> semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 限制</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" begin time:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" end time:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 释放</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;img src=&quot;/img/thread/permits.png&quot;&gt;</p>\n<p>类 Semaphore 的构造函数 permits 可以理解为同时刻通过的线程许可数，代表同一时间内最多允许多少个线程同时执行<br />\n acquire () 和 release () 之间的代码<br />\n eg: 无参方法的作用是使用 1 个许可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">SemaPhoreT</span> semaPhoreT <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SemaPhoreT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                semaPhoreT<span class=\"token punctuation\">.</span><span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                semaPhoreT<span class=\"token punctuation\">.</span><span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                semaPhoreT<span class=\"token punctuation\">.</span><span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>print：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-0 begin time:1526479020027</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0 end time:1526479021028</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-1 begin time:1526479021028</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-1 end time:1526479022028</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-2 begin time:1526479022028</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-2 end time:1526479023029</pre></td></tr></table></figure><p>可以看到打印信息依次输出，如果给为 1 个许可相当于这一段的时候是单线程的</p>\n<p>我们改改: <strong>private Semaphore semaphore = new Semaphore(2);</strong><br />\nprint：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-0 begin time:1526479290849</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-1 begin time:1526479290850</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0 end time:1526479291849</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-2 begin time:1526479291849</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-1 end time:1526479291850</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-2 end time:1526479292850</pre></td></tr></table></figure><p>这个打印结果说明同一时刻是有 0 跟 1 两个线程通过 acquire () 和 release () 之间的</p>\n<h3 id=\"3-semaphore实现生产者-消费者\"><a class=\"anchor\" href=\"#3-semaphore实现生产者-消费者\">#</a> 3. Semaphore 实现生产者、消费者</h3>\n<p>Semaphore 实现生产者、消费者模式的话还是比较简单的<br />\n我们以厨师、顾客来进行模拟这样一个场景，废话不多说，直接上代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hc<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>chapterOne<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SemaPhore</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *  Semaphore 实现生产者、消费者</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  created by cheng on 2018/5/16</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepastService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 设置 5 个厨师（生产者）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Semaphore</span> setSemaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 设置 10 个顾客（消费者）</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Semaphore</span> getSemaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">ReentrantLock</span> reentrantLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Condition</span> setCondition <span class=\"token operator\">=</span> reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Condition</span> getCondition <span class=\"token operator\">=</span> reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 最多一次上 4 盘菜</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> producePosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> producePosition<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                isEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span>  isEmpty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 判断有没有空盘子</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * @return true：没有空盘子 反之则有</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isFull <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> producePosition<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                isFull <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span>  isFull<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            setSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token comment\">// 没有空盘子  厨师要等待</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                setCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> producePosition<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    <span class=\"token comment\">// 发现有空盘子了  可以上菜</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"xx菜\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 生产了 \"</span> <span class=\"token operator\">+</span> producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">// 上菜</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            getCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            setSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            getSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token comment\">// 菜已经上齐了  没盘子装了  吃完了才能上</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                getCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> producePosition<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    <span class=\"token comment\">// 发现有菜上来  可以开饭了</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 消费了 \"</span> <span class=\"token operator\">+</span> producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    producePosition<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">// 端盘子下去</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            setCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            getSemaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>启动类 Run.java</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hc<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>chapterOne<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SemaPhore</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">RepastService</span> repastService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RepastService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ThreadP</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadP</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ThreadC</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadC</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            arrayP<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadP</span><span class=\"token punctuation\">(</span>repastService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            arrayC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadC</span><span class=\"token punctuation\">(</span>repastService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            arrayP<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            arrayC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>线程类 ThreadP.java</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hc<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>chapterOne<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SemaPhore</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadP</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RepastService</span> service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadP</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RepastService</span> service<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        service<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>ReentrantLock</strong> 跟<strong> Condition</strong> 大家不明白的先自行度娘，后面我抽空再补上，emmmm...<br />\nReentrantLock 在这里再做一重锁的判断，确保生产者跟消费者都是平衡的<br />\n如果不加 ReentrantLock 会怎么样，因为我们是用的 Condition 进行一个相互唤醒的操作，不用 ReentrantLock 的话可能会报<strong> IllegalMonitorStateException</strong> 的异常</p>\n<p>输出的话就给大家截个图：<br />\n&lt;img src=&quot;/img/thread/out.png&quot;&gt;</p>\n<h3 id=\"4总结\"><a class=\"anchor\" href=\"#4总结\">#</a> 4. 总结</h3>\n<p>Semaphore semaphore = new Semaphore (1) 其实只是初始化多少个许可<br />\n acquire () 相当于动态的减少许可，相应的 release () 可以动态的增加许可<br />\n Semaphore 提供的限制并发线程的功能，此功能在默认的 synchronized 种是不提供的</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1lpYWljaGVuL2phdmFEZW1vL3RyZWUvbWFzdGVyL2phdmFEZW1v\">源码地址</span><br />\n源码在 thread 目录下，还有一些其他 demo, 大家可自行学习</p>\n",
            "tags": [
                "Java",
                "Java",
                "多线程"
            ]
        },
        {
            "id": "http://vayi.site/dom4j/",
            "url": "http://vayi.site/dom4j/",
            "title": "Java读取xml——dom4j篇",
            "date_published": "2017-08-27T02:33:58.000Z",
            "content_html": "<p>首先引入 dom4j 的 jar</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hucheng<span class=\"token punctuation\">.</span>xmlParse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Attribute</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Document</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Element</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>dom4j<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SAXReader</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XmlUtils</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">long</span> lasting <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 获取 xml 文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">SAXReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SAXReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 获取到根节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">Element</span> node <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">getRootElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 判断跟节点下面是否还有子节点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">elementIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">Element</span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">elementIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">elementIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 开始循环子节点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token function\">listNodes</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lasting<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * @描述：循环子节点</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @作者：chen</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @时间：2017 年 8 月 17 日 上午 10:53:06</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @param node</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 首先获取当前节点的所有属性节点  </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Attribute</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 遍历属性节点  </span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Attribute</span> attribute <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"属性\"</span><span class=\"token operator\">+</span>attribute<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> attribute<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 如果当前节点内容不为空，则输出  </span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getTextTrim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 同时迭代当前节点下面的所有子节点  </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 使用递归  </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">elementIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">listNodes</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是  <code>data.xml</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VALUES</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VALUE</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>第一个<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NO</span><span class=\"token punctuation\">></span></span>鄂B74110<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NO</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ADDR</span><span class=\"token punctuation\">></span></span>湖北省黄石市白沙镇<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ADDR</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VALUE</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VALUE</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>第二个<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NO</span><span class=\"token punctuation\">></span></span>鄂B74111<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NO</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ADDR</span><span class=\"token punctuation\">></span></span>湖北省黄石市白沙镇白沙老街<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ADDR</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VALUE</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VALUE</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>第三个<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NO</span><span class=\"token punctuation\">></span></span>鄂B74112<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NO</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ADDR</span><span class=\"token punctuation\">></span></span>湖北省黄石市白沙镇白沙中学<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ADDR</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VALUE</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VALUES</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>控制台会输出：</p>\n<pre><code class=\"language-cmd\">属性id:1\n属性name:第一个\nNO：鄂B74110\nADDR：湖北省黄石市白沙镇\n属性id:2\n属性name:第二个\nNO：鄂B74111\nADDR：湖北省黄石市白沙镇白沙老街\n属性id:3\n属性name:第三个\nNO：鄂B74112\nADDR：湖北省黄石市白沙镇白沙中学\n运行时间：71 毫秒\n</code></pre>\n",
            "tags": [
                "Java",
                "Java",
                "xml"
            ]
        },
        {
            "id": "http://vayi.site/mysqlInstall/",
            "url": "http://vayi.site/mysqlInstall/",
            "title": "windows安装mysql（version:5.6.17）",
            "date_published": "2017-08-24T14:49:41.000Z",
            "content_html": "<p>说明：我安装的是免安装版  下载压缩文件解压就直接 ok 的</p>\n<blockquote>\n<p>新建文件  <code>my.ini</code></p>\n</blockquote>\n<pre><code>[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306 \n# 设置mysql的安装目录\nbasedir=D:\\mysql\\\n# 设置mysql数据库的数据的存放目录\ndatadir=D:\\mysql\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n</code></pre>\n<blockquote>\n<p>cmd 输入  <code>mysqld install</code>  回车运行就行了</p>\n</blockquote>\n<blockquote>\n<p>输入  <code>net start mysql</code>  启动服务</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>net start mysql</pre></td></tr></table></figure><blockquote>\n<p>启动不了则先<strong>删除</strong>  <code>data</code>  目录 (或移动到其他地方)，再执行:</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token parameter variable\">--initialize</span></pre></td></tr></table></figure><blockquote>\n<p>输入  <code>mysql -uroot -p</code>  , 默认是没有密码的。回车进入<br />\n有密码的话，可以  <code>mysql -uroot -p密码</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysql <span class=\"token parameter variable\">-uroot</span> -p密码</pre></td></tr></table></figure><blockquote>\n<p>也是可以是  <code>mysql -uroot -p</code>  &gt; 回车输入密码，推荐第二种，原因，你动手之后就知道了。(其实是看看有没有输错 <strong>QAQ</strong>)</p>\n</blockquote>\n<blockquote>\n<p>退出  <code>exit</code>  就行了。记住直接关闭  <code>cmd</code>  窗口是没有退出的，要输入  <code>exit</code>  才会退出</p>\n</blockquote>\n<blockquote>\n<p>然后添加环境变量：</p>\n</blockquote>\n<p>&lt;i class=&quot;icon-pencil&quot;&gt;&lt;/i&gt; 添加完成就可以直接：</p>\n<pre><code>进入cmd -&gt; mysql -uroot -p -&gt; 回车输入密码\n显示所有数据库 -&gt; show databases;\n查找数据库 -&gt; use 数据库名;\n切换数据库目录 -&gt; show tables;\n查找表 -&gt; sql查询工作select * from 表名;\n退出 -&gt; exit\n</code></pre>\n",
            "tags": [
                "Mysql",
                "mysql"
            ]
        },
        {
            "id": "http://vayi.site/oracleClob/",
            "url": "http://vayi.site/oracleClob/",
            "title": "oracle转化字段为clob",
            "date_published": "2017-08-23T12:58:05.000Z",
            "content_html": "<p>因为 Oracle 是没办法直接进行字段转化的，所以这里我们提供一个取巧的办法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--增加大字段项  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    alter table 需要修改的表 <span class=\"token function\">add</span> introduce clob<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    --将需要改成大字段的项内容copy到大字段中  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    update 需要修改的表 <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">introduce</span><span class=\"token operator\">=</span>需要修改的字段<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    --删除原有字段  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    alter table 需要修改的表 drop <span class=\"token function\">column</span> 需要修改的字段<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    --将大字段名改成原字段名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    alter table t_sim_activity <span class=\"token function\">rename</span> <span class=\"token function\">column</span> introduce to 需要修改的字段<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Oracle",
                "oracle"
            ]
        },
        {
            "id": "http://vayi.site/Hexo-gitment/",
            "url": "http://vayi.site/Hexo-gitment/",
            "title": "Hexo+gitment",
            "date_published": "2017-08-16T14:16:59.000Z",
            "content_html": "<p>因为多说关闭的原因，所以选择 gitment 来搭建留言评论 /(ㄒ o ㄒ)/~~</p>\n<h2 id=\"搭建步骤\"><a class=\"anchor\" href=\"#搭建步骤\">#</a> 搭建步骤</h2>\n<h3 id=\"1-注册-oauth-application\"><a class=\"anchor\" href=\"#1-注册-oauth-application\">#</a> 1. 注册 OAuth Application</h3>\n<p>首先需要注册一个 OAuth Application <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcGxpY2F0aW9ucy9uZXc=\">点击此处</span></p>\n<p>&lt;img src=&quot;/img/oauth.png&quot;&gt;</p>\n<p>其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如 我的是 https://yiaichen.github.io/）<br />\n注册完成之后你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p>\n<h3 id=\"2-引入-gitment\"><a class=\"anchor\" href=\"#2-引入-gitment\">#</a> 2. 引入 Gitment</h3>\n<p>将下面的代码添加到你的页面：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imsun.github.io/gitment/style/default.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imsun.github.io/gitment/dist/gitment.browser.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> gitment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gitment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'页面 ID'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可选。默认为 location.href</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">owner</span><span class=\"token operator\">:</span> <span class=\"token string\">'你的 GitHub ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">repo</span><span class=\"token operator\">:</span> <span class=\"token string\">'存储评论的 repo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">oauth</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">client_id</span><span class=\"token operator\">:</span> <span class=\"token string\">'你的 client ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">client_secret</span><span class=\"token operator\">:</span> <span class=\"token string\">'你的 client secret'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>gitment<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里的 id 是可选的  不填就删掉（这里画个圈，因为我是踩过坑的 QAQ）<br />\nowner：这里填 github 的用户名 比如我就填 Yiaichen<br />\nrepo：这里是存储评论的仓库 一般是建一个仓库地址 我这边就是 <span class=\"exturl\" data-url=\"aHR0cDovL1lpYWljaGVuLmdpdGh1Yi5pbw==\">Yiaichen.github.io</span></p>\n<p>&lt;img src=&quot;/img/owner.png&quot;&gt;</p>\n<p>然后下面的 client_id 跟 client_secret 就填你刚刚注册得到的就 ok 了</p>\n<h3 id=\"3-初始化\"><a class=\"anchor\" href=\"#3-初始化\">#</a> 3. 初始化</h3>\n<p>其实到这里差不多已经配置好了 只需要初始化一下<br />\n发布你的页面 （不要在本地测试，因为本地是一定初始化失败的）<br />\n然后登录你的 github 账号，必须跟第二步 owner 用户名相同的账号<br />\n登录之后点击初始化按钮，bingo~</p>\n<p>&lt;img src=&quot;/img/gitment.png&quot;&gt;</p>\n<h3 id=\"4常见错误\"><a class=\"anchor\" href=\"#4常见错误\">#</a> 4. 常见错误</h3>\n<p>ERROR:NOT FOUND ：一般是 owner 或者 repo 配置错误了，照着第二步来就好<br />\n初始化的时候报 alidation failed ：都说已经踩过的坑了啦 QAQ 自己往上找吧 /(ㄒ o ㄒ)/~~</p>\n",
            "tags": [
                "Hexo",
                "hexo"
            ]
        },
        {
            "id": "http://vayi.site/Github+Hexo/",
            "url": "http://vayi.site/Github+Hexo/",
            "title": "Github+Hexo",
            "date_published": "2017-08-05T03:35:46.093Z",
            "content_html": "<p>记录整个搭建 Hexo 的步骤吧～</p>\n<h2 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<p>1、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">git</span><br />\n2、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">nodejs</span><br />\n3、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLw==\">github</span> 账号</p>\n<h3 id=\"第一步\"><a class=\"anchor\" href=\"#第一步\">#</a> 第一步</h3>\n<p>首先把 git 跟 nodejs 下载 ok (地址在上方)<br />\n 安装的话就不细说了，一直 next 就可以了<br />\n验证有没有安装好的话直接在控制台中输出：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p>&lt;img src=&quot;/img/version.png&quot;&gt;</p>\n<p>如果有对应的版本输出就说明安装已经 ok 啦</p>\n<h3 id=\"第二步\"><a class=\"anchor\" href=\"#第二步\">#</a> 第二步</h3>\n<p>在本地建立一个 blog 文件夹（我是建在了 D 盘下面）<br />\n然后打开 git-bash，千万别用 cmd 跑后面的命令了，这里要圈起来，重点要考！！！</p>\n<p>现在开始安装 Hexo 了，cd 进我们的 blog 目录下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><p>&lt;img src=&quot;/img/hexocli.png&quot;&gt;</p>\n<p>这里会提示一个 warn 不用管他，然后输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p>&lt;img src=&quot;/img/--sava.png&quot;&gt;</p>\n<p>我这里直接用 cmd 截图了，这里无所谓，最好都用 git-bash，出现了一堆白字跟 warn 之后，我们得 hexo 就安装好了，输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><p>&lt;img src=&quot;/img/hexo -v.png&quot;&gt;</p>\n<p>如果看到对应的 hexo 版本信息就说明已经安装 ok 了</p>\n<h3 id=\"第三步\"><a class=\"anchor\" href=\"#第三步\">#</a> 第三步</h3>\n<p>安装好了 hexo 我们就要开始来使用他了，首先执行初始化：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo init</pre></td></tr></table></figure><p>&lt;img src=&quot;/img/hexo init.png&quot;&gt;</p>\n<p>这里会在我们自己建的目录下生成 hexo 的文件，如果执行 hexo init 的时候报 not empty 之类的错<br />\n解决方案是建议删除目录下的所有文件  然后重新执行一次 hexo init 命令</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>&lt;img src=&quot;/img/npm install.png&quot;&gt;</p>\n<p>之后 npm 将会自动安装你需要的组件，只需要等待 npm 操作即可。</p>\n<p>然后在命令行输入：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo g</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo s</pre></td></tr></table></figure><p>&lt;img src=&quot;/img/hexo g.png&quot;&gt;</p>\n<p>hexo g 的话会在目录下生成一个 public 文件夹，hexo s 就是启动服务啦～<br />\n 如果显示上面的信息的话就在本地已经启动 ok 啦～<br />\n 然后我们在浏览器中输入：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span></p>\n<p>&lt;img src=&quot;/img/hexo.png&quot;&gt;</p>\n<p>大功告成～（停止服务的话 Ctrl+c 就可以了）</p>\n<h3 id=\"第四步\"><a class=\"anchor\" href=\"#第四步\">#</a> 第四步</h3>\n<p>本地发布部署</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ hexo s</pre></td></tr></table></figure><p>后面有改动的话基本就是这三个命令，然后本地就可以显示更新后的内容啦～</p>\n",
            "tags": [
                "Hexo",
                "hexo"
            ]
        }
    ]
}