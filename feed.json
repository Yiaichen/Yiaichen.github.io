{
    "version": "https://jsonfeed.org/version/1",
    "title": "Vayi",
    "subtitle": null,
    "icon": "http://vayi.site/images/favicon.ico",
    "description": "vayi's blog~",
    "home_page_url": "http://vayi.site",
    "items": [
        {
            "id": "http://vayi.site/ofs/",
            "url": "http://vayi.site/ofs/",
            "title": "ofs1.5部署",
            "date_published": "2019-12-25T02:33:58.000Z",
            "content_html": "<h3 id=\"服务器配置（推荐）\"><a href=\"#服务器配置（推荐）\" class=\"headerlink\" title=\"服务器配置（推荐）\"></a>服务器配置（推荐）</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务器类型</th>\n<th style=\"text-align:center\">数量/台</th>\n<th style=\"text-align:center\">CPU</th>\n<th style=\"text-align:center\">内存</th>\n<th style=\"text-align:center\">系统磁盘</th>\n<th style=\"text-align:center\">数据磁盘</th>\n<th style=\"text-align:center\">网络带宽</th>\n<th style=\"text-align:center\">操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">应用服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">8核</td>\n<td style=\"text-align:center\">32G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">300G SSD</td>\n<td style=\"text-align:center\">4M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">接口服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">300G SSD</td>\n<td style=\"text-align:center\">5M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RDS数据库(高可用版)</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">8核</td>\n<td style=\"text-align:center\">32G</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">1T SSD</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">Mysql 5.7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基础服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">500G SSD</td>\n<td style=\"text-align:center\">2M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">报表服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">200G</td>\n<td style=\"text-align:center\">2M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试服务器</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">40G</td>\n<td style=\"text-align:center\">500G</td>\n<td style=\"text-align:center\">2M</td>\n<td style=\"text-align:center\">Ubuntu Server 16.04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试RDS数据库(高可用版)</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">4核</td>\n<td style=\"text-align:center\">16G</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">500G SSD</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">Mysql 5.7</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>  备注：如果有京东平台业务，还需加购一台同等配置京东云鼎ECS服务器、京东云鼎RDS服务器</p>\n</blockquote>\n<h3 id=\"服务器类型\"><a href=\"#服务器类型\" class=\"headerlink\" title=\"服务器类型\"></a>服务器类型</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务器类型</th>\n<th style=\"text-align:center\">部署应用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">应用服务器</td>\n<td style=\"text-align:center\">ofs</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">接口服务器</td>\n<td style=\"text-align:center\">各种edi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RDS数据库(高可用版)</td>\n<td style=\"text-align:center\">mysql </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基础服务器</td>\n<td style=\"text-align:center\">redis、mongoDB、rabbitMQ</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">报表服务器</td>\n<td style=\"text-align:center\">ofs(只给报表类功能使用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试服务器</td>\n<td style=\"text-align:center\">所有应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测试RDS数据库(高可用版)</td>\n<td style=\"text-align:center\">mysql</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n  <font color=\"#DC143C\"><strong>以下流程仅以测试服务器做演示, 生产服务器以上述表格为标准, 具体根据项目情况进行改动</strong></font>\n\n</blockquote>\n<h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><blockquote>\n<p>  系统必须在ttx用户下运行，所以需要为新系统添加ttx用户</p>\n<p>  以下操作以root用户权限执行</p>\n</blockquote>\n<ul>\n<li>新建用户并指定用户目录  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -d /home/ttx -m ttx</span><br><span class=\"line\">passwd ttx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   用户密码重启之后才会生效\n</code></pre><ul>\n<li>赋予sudo权限  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   在root下添加一行，如下所示\n\n&gt;   [注意] 此文件为只读文件，请保存时使用:`wq!`命令\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># User privilege specification</span><br><span class=\"line\">root    ALL=(ALL:ALL) ALL</span><br><span class=\"line\">ttx     ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>\n\n\n&gt;   [可选] 修改新建用户的Shell类型\n\n&gt;   找到ttx的一行，检查是否与下面一致，如不一致，修改\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@iZ8vbeurni16yy34ptzcdzZ:/# vi /etc/passwd</span><br><span class=\"line\">ttx:x:1000:1000::/home/ttx:/bin/bash</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>创建应用主目录  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/ttx/app</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"挂载数据盘\"><a href=\"#挂载数据盘\" class=\"headerlink\" title=\"挂载数据盘\"></a>挂载数据盘</h3><pre><code>仅针对数据盘默认未挂载的情况，比如阿里云。(这里以50G数据盘做演示)\n以下操作以root用户权限执行\n</code></pre><ul>\n<li>查看设备目录，通常数据盘为<code>/dev/vdb</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>![image](http://img.localhostes.com/images/2019/12/22/fdiskbefore.png)\n</code></pre><ul>\n<li><p>创建分区</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/vdb</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   根据提示，依次输入**n-&gt;p-&gt;1-&gt;回车-&gt;回车-&gt;wq**成功后会有以下输出\n\n![image](http://img.localhostes.com/images/2019/12/22/fdisk.png)\n\n&gt;   检查分区是否创建成功\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n\n![image](http://img.localhostes.com/images/2019/12/22/fdiskafter.png)\n\n&gt;\n</code></pre><ul>\n<li>格式化   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/vdb1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>![image](http://img.localhostes.com/images/2019/12/22/mkfs.png)\n</code></pre><ul>\n<li><p>挂载数据盘</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown ttx:ttx home/ttx/app/</span><br><span class=\"line\">mount /dev/vdb1 /home/ttx/app</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   检查挂载结果 `df -h`\n\n![image](http://img.localhostes.com/images/2019/12/22/df-h.png)\n</code></pre><ul>\n<li>设置自动挂载（请根据实际挂载硬盘参数对下面命令做适当修改）  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;/dev/vdb1 /home/ttx/app ext4 defaults 0 0 &apos; &gt;&gt;/etc/fstab</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装基础运行环境\"><a href=\"#安装基础运行环境\" class=\"headerlink\" title=\"安装基础运行环境\"></a>安装基础运行环境</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>以创建好的<code>ttx</code>身份进行登录</li>\n<li>创建存放安装包的目录: <code>mkdir /home/ttx/installer</code></li>\n<li>准备好<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">安装包</a></li>\n</ul>\n<h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><ul>\n<li><p>使用阿里解决方案 安装<code>docker-engine</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># [docker-engine已停止支持，请使用以下脚本安装]</span><br><span class=\"line\"></span><br><span class=\"line\"># step 1: 安装必要的一些系统工具</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\"># step 2: 安装GPG证书</span><br><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"># Step 3: 写入软件源信息</span><br><span class=\"line\">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class=\"line\"># Step 4: 更新并安装 Docker-CE</span><br><span class=\"line\">sudo apt-get -y update</span><br><span class=\"line\">sudo apt-get -y install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># https://help.aliyun.com/document_detail/60742.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   注意：如果curl不存在，请使用以下命令安装\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install curl</span><br></pre></td></tr></table></figure>\n\n\n&gt;   **非必要流程** 修改daemon配置文件`/etc/docker/daemon.json`来使用加速器\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://gkhkf8gb.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n\n![image](http://img.localhostes.com/images/2019/12/22/EOF.png)\n</code></pre><ul>\n<li>将用户ttx加入允许执行docker组  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker ttx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h4><ul>\n<li><p>上传 <code>docker-compose-Linux-x86_64.1.7.1</code> 文件到<code>/home/ttx/installer</code> 也可以下载最新版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose`</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>执行以下脚本安装</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/installer</span><br><span class=\"line\">#复制并重命名</span><br><span class=\"line\">sudo cp docker-compose-Linux-x86_64.1.7.1 /usr/local/bin/docker-compose</span><br><span class=\"line\">#更改文件权限使其可以执行　+x　代表执行权限</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   检查安装结果\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttx@iZ8vbeurni16yy34ptzcdzZ:/# docker-compose --version</span><br><span class=\"line\">docker-compose version 1.7.1, build 0a9ab35</span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"mongo、rabbit、redis、mysql\"><a href=\"#mongo、rabbit、redis、mysql\" class=\"headerlink\" title=\"mongo、rabbit、redis、mysql\"></a>mongo、rabbit、redis、mysql</h4><blockquote>\n<p>  创建镜像存放目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/ttx/installer/images</span><br><span class=\"line\">sudo mkdir /home/ttx/installer/compose</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>上传镜像</p>\n<ul>\n<li>上传对应的镜像文件到<code>/home/ttx/installer/images</code></li>\n<li>上传compose.zip到<code>/home/ttx/installer/compose</code></li>\n</ul>\n</li>\n<li><p>安装镜像</p>\n<ul>\n<li>执行以下脚本装载镜像<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/installer/images</span><br><span class=\"line\">sudo docker load &lt; mongo_3.2.4.tar</span><br><span class=\"line\">sudo docker load &lt; rabbitmq_3.6.1-management.tar</span><br><span class=\"line\">sudo docker load &lt; redis_3.2.0.tar</span><br><span class=\"line\">#仅当mysql在容器中运行时才运行以下命令</span><br><span class=\"line\">sudo docker load &lt; mysql_5.7.11.tar</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>启动服务 分别进入每一个容器目录，执行以下脚本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   检查镜像是否创建成功 `docker ps`\n\n![image](http://img.localhostes.com/images/2019/12/22/dockerps.png)\n\n- 注意：MySql参数设置在 `/etc/my.cnf` 中的`[mysqld]`后添加以下段：\n    - 使用utf-8编码：`character-set-server=utf8`\n    - 表不区分大小写：`lower_case_table_names=1`\n    - 分组连接最大长度：`group_concat_max_len=102400`\n    - 缓冲池字节大小：`innodb_buffer_pool_size = 数据库内存一半`\n\n- 注意：创建rabbitMQ的`虚拟主机(VirtualHost)`新安装的rabbitMQ必须新建主机，不允许使用默认的。新主机名称为`企业ID`，企业ID的格式为`4位项目编码 + ofs +xxxx`，其中xxxx为`prod`或者`test`登录`http://服务器地址:35673`进行创建，创建后将主机权限赋予ttx用户\n</code></pre><h4 id=\"tomcat\"><a href=\"#tomcat\" class=\"headerlink\" title=\"tomcat\"></a>tomcat</h4><blockquote>\n<p>  以下操作以ttx用户权限执行</p>\n</blockquote>\n<ul>\n<li>上传<strong>tomcat-deploy-1.6.zip到/home/ttx/installer</strong>目录下<ul>\n<li>解压缩  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unzip ./tomcat-deploy-1.6.zip -d /home/ttx/app/tomcat-deploy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 创建系统环境\n\n    &gt;   运行前请检查`set_env.py`中`APP_HOME`的目录是否正确，应为`/home/ttx/app/`\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/tomcat-deploy</span><br><span class=\"line\">python install_env.py</span><br></pre></td></tr></table></figure>\n</code></pre><blockquote>\n<p>  如果服务器上没有python命令，而只有python3，则使用python3代替</p>\n</blockquote>\n<h4 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h4><blockquote>\n<p>  以下操作以ttx用户权限执行</p>\n</blockquote>\n<ul>\n<li>上传<strong>nginx-1.11.6.tar.gz到/home/ttx/installer</strong>目录下</li>\n<li>执行以下脚本安装   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential  libpcre3-dev libssl-dev</span><br><span class=\"line\">sudo tar -zxvf /home/ttx/installer/nginx-1.11.6.tar.gz -C /home/ttx/app/</span><br><span class=\"line\">cd /home/ttx/app</span><br><span class=\"line\">cd nginx-1.11.6</span><br><span class=\"line\">#对nginx进行配置</span><br><span class=\"line\">sudo ./configure --with-http_ssl_module --prefix=/home/ttx/app/nginx/</span><br><span class=\"line\">#编译安装</span><br><span class=\"line\">sudo make &amp;&amp; make install</span><br><span class=\"line\">cd /home/ttx/app/nginx</span><br><span class=\"line\"># 备份配置文件</span><br><span class=\"line\">sudo mv conf/nginx.conf conf/nginx.conf.backup</span><br><span class=\"line\">sudo mkdir webapps</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>  tar命令如果不存在的话先下载</p>\n<p>  如果服务器上没有python命令，而只有python3，则使用python3代替</p>\n</blockquote>\n<ul>\n<li><p>上传配置文件<code>nginx.conf</code>和<code>proxy.conf</code>到<code>/home/ttx/app/nginx/conf/</code>目录下</p>\n</li>\n<li><p>在<a href=\"http://nexus.cybertrans.ittx.com.cn/\" target=\"_blank\" rel=\"noopener\">nexus</a>上下载对应的<code>cbt-web</code>(这里以<code>cbt-web-2.5.12</code>做演示)</p>\n<ul>\n<li><p>搜索<code>cbt-web-2.5.12</code><br>  <img src=\"http://img.localhostes.com/images/2019/12/23/nexus.png\" alt=\"image\"></p>\n</li>\n<li><p>点击对应版本<br>  <img src=\"http://img.localhostes.com/images/2019/12/23/seach.png\" alt=\"image\"></p>\n</li>\n<li><p>下载cbt_web压缩包<br>  <img src=\"http://img.localhostes.com/images/2019/12/23/download.png\" alt=\"image\"></p>\n</li>\n<li><p>把压缩包上传到服务器<code>/home/ttx/app/nginx/webapps/ofs1_5/</code>目录下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/nginx/webapps/</span><br><span class=\"line\"># 创建ofs1_5文件夹</span><br><span class=\"line\">sudo mkdir ofs1_5</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行上传操作 ... ...</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压cbt-web</span><br><span class=\"line\">sudo tar -zxvf cbt-web-2.5.12-20190718.063712-5.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>测试并启动<code>nginx</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/nginx/sbin</span><br><span class=\"line\">#测试nginx配置文件</span><br><span class=\"line\">sudo ./nginx -t</span><br><span class=\"line\">#启动　nginx</span><br><span class=\"line\">sudo ./nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>&gt;   Nginx配置没问题会有以下输出\n\n![image](http://img.localhostes.com/images/2019/12/23/93ZTJ882G88VANDT5G.png)\n\n&gt;   **注意：** 使用以下命令重启Nginx服务\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>检查是否启动成功<ul>\n<li>在浏览器输入 <code>http://服务器地址:30001/</code></li>\n<li>有以下展示就说明Nginx已经配置成功了<br>  <img src=\"http://img.localhostes.com/images/2019/12/23/XKCNLIN1M49SFEC3.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"准备程序环境\"><a href=\"#准备程序环境\" class=\"headerlink\" title=\"准备程序环境\"></a>准备程序环境</h3><blockquote>\n<p>  准备程序的部署目录和运行目录(下述以<code>ofs1_5</code>、<code>license</code>演示)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/tomcat-deploy</span><br><span class=\"line\">python install_app.py license 30008</span><br><span class=\"line\"># 比如内存限制为最低1g，最高4g</span><br><span class=\"line\">python install_app.py ofs1_5 9005 1g 4g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  注意：如果服务器上没有python命令，而只有python3，则执行以下命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/tomcat-deploy</span><br><span class=\"line\">python3 install_app.py license 30008</span><br><span class=\"line\"># 比如内存限制为最低1g，最高4g</span><br><span class=\"line\">python3 install_app.py ofs1_5 9005 1g 4g</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装license服务\"><a href=\"#安装license服务\" class=\"headerlink\" title=\"安装license服务\"></a>安装license服务</h3><ul>\n<li>上传license.zip文件到/home/ttx/app/license/upload 目录</li>\n<li><p>执行命令</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /home/ttx/app/jre/lib/amd64/*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建执行脚本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/license</span><br><span class=\"line\">sudo echo &quot;export LD_LIBRARY_PATH=/home/ttx/app/jre/lib/amd64 &amp;&amp; nohup /home/ttx/app/jre/bin/java -jar /home/ttx/app/license/upload/license.zip &amp;&quot; &gt; run.sh</span><br><span class=\"line\">sudo chmod +x run.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动license服务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh ./run.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问license页面：<code>http://服务器地址:30008</code>,点击注册文件进行下载<br>  <img src=\"http://img.localhostes.com/images/2019/12/24/license.png\" alt=\"license.png\"></p>\n</li>\n<li>把下载的cluster-blank.lic给项目经理，进行授权</li>\n<li><p>得到授权者提供的正式license文件后，将文件（通常为lic文件(<code>ttx.lic</code>)）放在licenses目录下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重启license服务</span><br><span class=\"line\">ps -ef | grep license</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  通常输出如下：</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ttx       9354     1  1 20:27 pts/1    00:00:15 /home/ttx/app/jre/bin/java -jar /home/ttx/app/license/upload/license.zip</span><br><span class=\"line\">ttx       9632  1277  0 20:42 pts/0    00:00:00 grep --color=auto java</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  找到含有license.zip的进程，杀掉进程；比如上例中，进程ID为9354</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将9354替换为实际的进程ID</span><br><span class=\"line\">sudo kill 9354</span><br><span class=\"line\">cd /home/ttx/app/license</span><br><span class=\"line\">./run.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问<code>http://服务器地址:30008</code>，正常情况应显示服务器的license信息</p>\n</li>\n</ul>\n<h3 id=\"Jenkins构建\"><a href=\"#Jenkins构建\" class=\"headerlink\" title=\"Jenkins构建\"></a>Jenkins构建</h3><ul>\n<li>进入<code>Jenkins</code>配置页面: <a href=\"http://ci.ittx.com.cn\" target=\"_blank\" rel=\"noopener\">http://ci.ittx.com.cn</a> 进入对应文件夹 新建项目目录(例如我的项目是<code>xxx</code>)<br><img src=\"http://img.localhostes.com/images/2019/12/24/mainhtml.png\" alt=\"mainhtml.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/24/dirs.png\" alt=\"dirs.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/24/jenkinsdir.png\" alt=\"jenkinsdir.png\"></li>\n</ul>\n<blockquote>\n<p>  最后save保存就行</p>\n</blockquote>\n<ul>\n<li>新建一个项目，这里可以直接复制已有的项目，先找到对应项目的路径。 比如<code>ofs1_5</code>的路径是这个<code>xoms/OFS-1.5/ofs-1.5</code></li>\n</ul>\n<blockquote>\n<p>  新建项目，粘贴复制好的 <code>xoms/OFS-1.5/ofs-1.5</code> </p>\n</blockquote>\n<p><img src=\"http://img.localhostes.com/images/2019/12/24/jenkinsitem.png\" alt=\"jenkinsitem.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinscopy.png\" alt=\"jenkinsitem.png\"></p>\n<blockquote>\n<p>  根据项目进行修改<code>参与人</code>以及对应的<code>customerID</code>,然后<code>save</code>即可</p>\n</blockquote>\n<p><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinsedit1.png\" alt=\"jenkinsitem.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinsedit2.png\" alt=\"jenkinsitem.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinsedit3.png\" alt=\"jenkinsitem.png\"></p>\n<ul>\n<li>打包项目，获取对应的<code>下载脚本</code></li>\n</ul>\n<p><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinsscript1.png\" alt=\"jenkinsitem.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinsscript2.png\" alt=\"jenkinsitem.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/23/jenkinsscript3.png\" alt=\"jenkinsitem.png\"></p>\n<ul>\n<li>上传刚下载的<code>update-xxx-xofs-test.sh</code>到<code>/home/ttx/app/tomcat-deploy</code></li>\n<li>配置阿里<code>oss</code>（可选：具体看项目是否支持）<ul>\n<li>oss地址：<a href=\"https://ttx-download.oss-cn-hangzhou.aliyuncs.com/projects\" target=\"_blank\" rel=\"noopener\">https://ttx-download.oss-cn-hangzhou.aliyuncs.com/projects</a></li>\n<li>修改 <code>update-xxx-xofs-test.sh</code> url <code>(https://release.cybertrans.ittx.com.cn)</code>为<code>oss地址</code><br><img src=\"http://img.localhostes.com/images/2019/12/23/oss.png\" alt=\"jenkinsitem.png\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ofs配置\"><a href=\"#ofs配置\" class=\"headerlink\" title=\"ofs配置\"></a>ofs配置</h3><ul>\n<li>执行数据库初始化脚本</li>\n<li>上传<code>application.yml、application-xxx.yml</code> 到 <code>/home/ttx/app/ofs/conf/default</code>目录下<ul>\n<li>注意: <code>xxx</code>的取值为：<ul>\n<li>正式服务器： <code>prod</code></li>\n<li>测试服务器： <code>test</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>根据项目情况配置对应的<code>mysql、redis、mongodb、rabbitmq</code>链接</li>\n<li><p>拉取<code>Jenkins</code>打好的包，编译并启动</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/ttx/app/tomcat-deploy</span><br><span class=\"line\">sh update-xxx-xofs-test.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动完成之后检查日志输出是否正常, <code>ctrl + c</code>退出查看模式</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -fn 100 /home/ttx/app/ofs1_5/catalina/9005/logs/catalina.out</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动成功，访问<code>http://服务器地址:30001</code>进行访问页面</p>\n</li>\n</ul>\n<p><img src=\"http://img.localhostes.com/images/2019/12/23/main.png\" alt=\"jenkinsitem.png\"><br><img src=\"http://img.localhostes.com/images/2019/12/23/ofs.png\" alt=\"jenkinsitem.png\"></p>\n<ul>\n<li>启动、停止、编译、重启命令  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./app_start.sh ofs1_5</span><br><span class=\"line\">./app.stop.sh ofs1_5</span><br><span class=\"line\">./app_deploy.sh ofs1_5</span><br><span class=\"line\">./app_restart.sh ofs1_5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"参考信息\"><a href=\"#参考信息\" class=\"headerlink\" title=\"参考信息\"></a>参考信息</h3><h4 id=\"系统目录\"><a href=\"#系统目录\" class=\"headerlink\" title=\"系统目录\"></a>系统目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-/</span><br><span class=\"line\">  |- home</span><br><span class=\"line\">    |- ttx</span><br><span class=\"line\">      |- installer</span><br><span class=\"line\">        |- images</span><br><span class=\"line\">        |- compose</span><br><span class=\"line\">      |- app</span><br><span class=\"line\">        |- redis</span><br><span class=\"line\">        |- mongo</span><br><span class=\"line\">        |- mysql</span><br><span class=\"line\">        |- rabbitMQ</span><br><span class=\"line\">        |- tomcat-deploy</span><br><span class=\"line\">        |- nginx</span><br><span class=\"line\">        |- license</span><br><span class=\"line\">        |- ofs1_5</span><br><span class=\"line\">        |- scheduler</span><br><span class=\"line\">        |- edi-qimen</span><br><span class=\"line\">        |- edi-taobao</span><br></pre></td></tr></table></figure>\n<h4 id=\"端口分配\"><a href=\"#端口分配\" class=\"headerlink\" title=\"端口分配\"></a>端口分配</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">服务</th>\n<th style=\"text-align:center\">端口</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">nginx</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">ofs 端口可转80端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mysql</td>\n<td style=\"text-align:center\">33306</td>\n<td style=\"text-align:center\">当mysql为通天晓安装时，必须修改端口号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mongo</td>\n<td style=\"text-align:center\">37017</td>\n<td style=\"text-align:center\">生产服务器必须设定密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rabbitMQ</td>\n<td style=\"text-align:center\">35672</td>\n<td style=\"text-align:center\">mq连接端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rabbitMQ-management</td>\n<td style=\"text-align:center\">35673</td>\n<td style=\"text-align:center\">消息队列管理可视化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">redis</td>\n<td style=\"text-align:center\">36379</td>\n<td style=\"text-align:center\">生产服务器必须设定密码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ofs</td>\n<td style=\"text-align:center\">9005</td>\n<td style=\"text-align:center\">ofs内部端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ofs</td>\n<td style=\"text-align:center\">30001</td>\n<td style=\"text-align:center\">ofs外部端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scheduler</td>\n<td style=\"text-align:center\">30001</td>\n<td style=\"text-align:center\">使用到计划任务组件时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">license</td>\n<td style=\"text-align:center\">30008</td>\n<td style=\"text-align:center\">仅当授权服务部署在客户服务器时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">edi</td>\n<td style=\"text-align:center\">30012-30020</td>\n<td style=\"text-align:center\">多个端口为客户部署多套edi保留</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "http://vayi.site/proxy/",
            "url": "http://vayi.site/proxy/",
            "title": "一个栗子搞懂代理模式",
            "date_published": "2018-11-24T14:12:30.000Z",
            "content_html": "<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>代理模式，为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>\n</blockquote>\n<h3 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h3><p><img src=\"/img/proxy.png\"></p>\n<h3 id=\"三种代理模式\"><a href=\"#三种代理模式\" class=\"headerlink\" title=\"三种代理模式\"></a>三种代理模式</h3><ul>\n<li>静态代理</li>\n<li>JDK动态代理</li>\n<li>CGLib动态代理</li>\n</ul>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><blockquote>\n<p>假设我现在想买一台Switch，但是现在国内又买不到怎么办？那就只能找代购了，在代理模式的角度来看的话，这里的<code>我</code>就是<code>真实的对象(RealSubject)</code>，<code>代购</code>就是一个<code>代理对象(Proxy)</code>，<code>买Switch</code>就是抽象对象的行为(Subject)</p>\n</blockquote>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>Subject：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象对象接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 声明需要被代理的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 让代理对象来帮我们买一台Switch</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buySwitch</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>RealSubject：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 我只想买一台Switch</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buySwitch</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我只想买一台Switch\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Proxy：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 代理对象（代购）</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buySwitch</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//引用并创建真实对象实例</span></span><br><span class=\"line\">        RealSubject realSubject = <span class=\"keyword\">new</span> RealSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用真实对象的方法，进行代理购买Switch</span></span><br><span class=\"line\">        realSubject.buySwitch();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//代购进行一些额外的操作</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buyGameCard();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 顺便买一些游戏卡</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buyGameCard</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"再顺便买一些游戏卡\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Client：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Run</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Subject proxy = <span class=\"keyword\">new</span> Proxy();</span><br><span class=\"line\">        proxy.buySwitch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Result：<br><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我只想买一台Switch</span><br><span class=\"line\">再顺便买一些游戏卡</span><br></pre></td></tr></table></figure></p>\n<p>优点：方便、快捷<br>缺点：每一个真实对象要有一个对应的代理类，并且行为多了会比较冗余，不满足<code>开闭原则</code></p>\n<blockquote>\n<p>开闭原则：对扩展开放，对修改关闭。</p>\n</blockquote>\n<h3 id=\"栗子延伸\"><a href=\"#栗子延伸\" class=\"headerlink\" title=\"栗子延伸\"></a>栗子延伸</h3><blockquote>\n<p>假设这个时候买了Switch，又想玩其他的游戏。比如只狼啥的，那就得再买个PS4，按照我们刚刚的静态代理来看的话，那就得在<code>抽象行为对象(Subject)</code>里面再加一个<code>buyPS4()</code>的方法，并且对应的对象跟代理都需要进行实现这个方法，要是再多几个其他的也就太冗余了，这个时候就得考虑是不是可以<code>动态的进行代理</code>了？</p>\n</blockquote>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>真实对象跟抽象行为对象添加<code>buyPS4()</code>方法，修改抽象对象为DynamicHandler<br>DynamicHandler：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK动态代理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object targetObject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建代理对象 这段也可以不在此类，也可以放在客户端里面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createProxy</span><span class=\"params\">(Object targetOjbect)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.targetObject = targetOjbect;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 创建代理对象</span></span><br><span class=\"line\"><span class=\"comment\">         * Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span><br><span class=\"line\"><span class=\"comment\">         * loader：代理类的类加载器</span></span><br><span class=\"line\"><span class=\"comment\">         * interfaces：指定代理类所实现的接口</span></span><br><span class=\"line\"><span class=\"comment\">         * h：动态代理对象在调用方法的时候，关联的InvocationHandler对象</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(targetOjbect.getClass().getClassLoader(),</span><br><span class=\"line\">                targetOjbect.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * InvocationHandler接口所定义的唯一的一个方法，该方法负责集中处理动态代理类上的所有方法的调用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用处理器根据这三个参数进行预处理或分派到委托类实例上执行</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proxy  代理类的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 代理类被调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args   调用方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//触发真实对象之前或者之后可以做一些额外操作</span></span><br><span class=\"line\">        Object result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"method:\"</span> + method.getName() + <span class=\"string\">\" proxy:\"</span> + proxy.getClass().getName());</span><br><span class=\"line\">        result = method.invoke(<span class=\"keyword\">this</span>.targetObject, args);<span class=\"comment\">//通过反射执行某个类的某方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buyGameCard();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 顺便买一些游戏卡</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buyGameCard</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"再顺便买一些游戏卡\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Client：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Run</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception  </span>&#123;</span><br><span class=\"line\">        DynamicHandler dynamicHandler = <span class=\"keyword\">new</span> DynamicHandler();</span><br><span class=\"line\">        Subject subject = (Subject) dynamicHandler.createProxy(<span class=\"keyword\">new</span> RealSubject());</span><br><span class=\"line\">        subject.buySwitch();</span><br><span class=\"line\">        subject.buyPS4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Result：<br><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我只想买一台Switch</span><br><span class=\"line\">再顺便买一些游戏卡</span><br><span class=\"line\">我想再买一台PS4</span><br><span class=\"line\">再顺便买一些游戏卡</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>疑问：为啥请求subject的对象会跑到DynamicHandler里面执行invoke()方法呢？</p>\n</blockquote>\n<p>源码分析：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          InvocationHandler h)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 生成指定的代理类</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 调用代理类的构造函数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            Throwable t = e.getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>源码解析:<br>getProxyClass(loader, interfaces)创建代理类$Proxy0.$Proxy0类 实现了Subject接口,并继承了Proxy类. </p>\n<p>$Proxy0：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class $Proxy0 extends Proxy implements Subject &#123;</span><br><span class=\"line\">    private static Method m1;</span><br><span class=\"line\">    private static Method m3;</span><br><span class=\"line\">    private static Method m2;</span><br><span class=\"line\">    private static Method m4;</span><br><span class=\"line\">    private static Method m0;</span><br><span class=\"line\"></span><br><span class=\"line\">    public $Proxy0(InvocationHandler var1) throws  &#123;</span><br><span class=\"line\">        super(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public final boolean equals(Object var1) throws  &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return (Boolean)super.h.invoke(this, m1, new Object[]&#123;var1&#125;);</span><br><span class=\"line\">        &#125; catch (RuntimeException | Error var3) &#123;</span><br><span class=\"line\">            throw var3;</span><br><span class=\"line\">        &#125; catch (Throwable var4) &#123;</span><br><span class=\"line\">            throw new UndeclaredThrowableException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public final void buySwitch() throws  &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            super.h.invoke(this, m3, (Object[])null);</span><br><span class=\"line\">        &#125; catch (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            throw var2;</span><br><span class=\"line\">        &#125; catch (Throwable var3) &#123;</span><br><span class=\"line\">            throw new UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public final String toString() throws  &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return (String)super.h.invoke(this, m2, (Object[])null);</span><br><span class=\"line\">        &#125; catch (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            throw var2;</span><br><span class=\"line\">        &#125; catch (Throwable var3) &#123;</span><br><span class=\"line\">            throw new UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public final void buyPS4() throws  &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            super.h.invoke(this, m4, (Object[])null);</span><br><span class=\"line\">        &#125; catch (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            throw var2;</span><br><span class=\"line\">        &#125; catch (Throwable var3) &#123;</span><br><span class=\"line\">            throw new UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public final int hashCode() throws  &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return (Integer)super.h.invoke(this, m0, (Object[])null);</span><br><span class=\"line\">        &#125; catch (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            throw var2;</span><br><span class=\"line\">        &#125; catch (Throwable var3) &#123;</span><br><span class=\"line\">            throw new UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, Class.forName(&quot;java.lang.Object&quot;));</span><br><span class=\"line\">            m3 = Class.forName(&quot;design.proxy.statics.Subject&quot;).getMethod(&quot;buySwitch&quot;);</span><br><span class=\"line\">            m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;);</span><br><span class=\"line\">            m4 = Class.forName(&quot;design.proxy.statics.Subject&quot;).getMethod(&quot;buyPS4&quot;);</span><br><span class=\"line\">            m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;);</span><br><span class=\"line\">        &#125; catch (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            throw new NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            throw new NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>观察m3、m4这两个方法，然后看对应的方法里面都会有一个super.h.invoke()方法，这个<code>super.h</code>就是我们的<code>DynamicHandler代理对象</code></p>\n</blockquote>\n<p>步骤：<br>Proxy.newProxyInstance生成$Proxy0 -&gt; $Proxy0调用bySwitch方法 -&gt; DynamicHandler.invoke() -&gt; 通过反射再调用真实对象请求的方法</p>\n<h3 id=\"CGLib动态代理\"><a href=\"#CGLib动态代理\" class=\"headerlink\" title=\"CGLib动态代理\"></a>CGLib动态代理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;<span class=\"comment\">//业务类对象，供代理方法中进行真正的业务方法调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//相当于JDK动态代理中的绑定</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getInstance</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;  <span class=\"comment\">//给业务对象赋值</span></span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer(); <span class=\"comment\">//创建加强器，用来创建动态代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(<span class=\"keyword\">this</span>.target.getClass());  <span class=\"comment\">//为加强器指定要代理的业务类（即：为下面生成的代理类指定父类）</span></span><br><span class=\"line\">        <span class=\"comment\">//设置回调：对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实现intercept()方法进行拦</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理类对象并返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 实现回调方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        proxy.invokeSuper(obj, args); <span class=\"comment\">//调用业务类（父类中）的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.buyGameCard();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 顺便买一些游戏卡</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buyGameCard</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"再顺便买一些游戏卡\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Client：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Run</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception  </span>&#123;</span><br><span class=\"line\">        DynamicHandler handler = <span class=\"keyword\">new</span> DynamicHandler();</span><br><span class=\"line\">        RealSubject subject = (RealSubject) handler.getInstance(<span class=\"keyword\">new</span> RealSubject());</span><br><span class=\"line\">        subject.buySwitch();</span><br><span class=\"line\">        subject.buyPS4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Result：<br><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我只想买一台Switch</span><br><span class=\"line\">再顺便买一些游戏卡</span><br><span class=\"line\">我想再买一台PS4</span><br><span class=\"line\">再顺便买一些游戏卡</span><br></pre></td></tr></table></figure></p>\n<p>原理跟JDK的类似，只不过不是继承Proxy了，而是通过Enhancer类操作节码生成代理对象来继承真实对象，然后进行方法拦截进入DynamicHandler的intercept()方法，因为是继承的真实对象所以真实的对象不能被final修饰。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">·</th>\n<th style=\"text-align:center\">静态代理是</th>\n<th style=\"text-align:center\">JDK动态代理</th>\n<th style=\"text-align:center\">CGLib动态代理</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">优点</td>\n<td style=\"text-align:center\">方便、快，适合代理对象比较少的场景</td>\n<td style=\"text-align:center\">易扩展，适合代理对象比较多得场景</td>\n<td style=\"text-align:center\">易扩展，比反射调用方法快一点，没有太大的性能问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">缺点</td>\n<td style=\"text-align:center\">不好扩展，违反开闭原则</td>\n<td style=\"text-align:center\">必须提供接口，并且因为通过反射来调用方法，消耗性能</td>\n<td style=\"text-align:center\">ASM操作生成类比较慢，真实对象不能为final</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"AOP中的应用\"><a href=\"#AOP中的应用\" class=\"headerlink\" title=\"AOP中的应用\"></a>AOP中的应用</h2><h3 id=\"AOP中的一些术语\"><a href=\"#AOP中的一些术语\" class=\"headerlink\" title=\"AOP中的一些术语\"></a>AOP中的一些术语</h3><ul>\n<li>1.通知(Advice):<br>通知定义了切面是什么以及何时使用。描述了切面要完成的工作和何时需要执行这个工作。</li>\n<li>2.连接点(Joinpoint):<br>程序能够应用通知的一个“时机”，这些“时机”就是连接点，例如方法被调用时、异常被抛出时等等。</li>\n<li>3.切入点(Pointcut)<br>通知定义了切面要发生的“故事”和时间，那么切入点就定义了“故事”发生的地点，例如某个类或方法的名称，spring中允许我们方便的用正则表达式来指定</li>\n<li>4.切面(Aspect)<br>通知和切入点共同组成了切面：时间、地点和要发生的“故事”</li>\n<li>5.引入(Introduction)<br>引入允许我们向现有的类添加新的方法和属性(Spring提供了一个方法注入的功能）</li>\n<li>6.目标(Target)<br>即被通知的对象，如果没有AOP,那么它的逻辑将要交叉别的事务逻辑，有了AOP之后它可以只关注自己要做的事（AOP让他做爱做的事）</li>\n<li>7.代理(proxy)<br>应用通知的对象，详细内容参见设计模式里面的代理模式</li>\n<li>8.织入(Weaving)<br>把切面应用到目标对象来创建新的代理对象的过程，织入一般发生在如下几个时机:<br>(1)编译时：当一个类文件被编译时进行织入，这需要特殊的编译器才可以做的到，例如AspectJ的织入编译器<br>(2)类加载时：使用特殊的ClassLoader在目标类被加载到程序之前增强类的字节代码<br>(3)运行时：切面在运行的某个时刻被织入,SpringAOP就是以这种方式织入切面的，原理应该是使用了JDK的动态代理技术</li>\n</ul>\n<h3 id=\"拼多多版本AOP\"><a href=\"#拼多多版本AOP\" class=\"headerlink\" title=\"拼多多版本AOP\"></a>拼多多版本AOP</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 前置增强</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeforeAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 后置增强</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AfterAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后以JDK的动态代理为例子修改一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK动态代理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object targetObject;</span><br><span class=\"line\">    <span class=\"comment\">//前值增强</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BeforeAdvice beforeAdvice;</span><br><span class=\"line\">    <span class=\"comment\">//后置增强</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AfterAdvice afterAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BeforeAdvice <span class=\"title\">getBeforeAdvice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beforeAdvice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeforeAdvice</span><span class=\"params\">(BeforeAdvice beforeAdvice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beforeAdvice = beforeAdvice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AfterAdvice <span class=\"title\">getAfterAdvice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> afterAdvice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAfterAdvice</span><span class=\"params\">(AfterAdvice afterAdvice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.afterAdvice = afterAdvice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建代理对象 这段也可以不在此类，也可以放在客户端里面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createProxy</span><span class=\"params\">(Object targetOjbect)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.targetObject = targetOjbect;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 创建代理对象</span></span><br><span class=\"line\"><span class=\"comment\">         * Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span><br><span class=\"line\"><span class=\"comment\">         * loader：代理类的类加载器</span></span><br><span class=\"line\"><span class=\"comment\">         * interfaces：指定代理类所实现的接口</span></span><br><span class=\"line\"><span class=\"comment\">         * h：动态代理对象在调用方法的时候，关联的InvocationHandler对象</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(targetOjbect.getClass().getClassLoader(),</span><br><span class=\"line\">                targetOjbect.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * InvocationHandler接口所定义的唯一的一个方法，该方法负责集中处理动态代理类上的所有方法的调用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用处理器根据这三个参数进行预处理或分派到委托类实例上执行</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proxy  代理类的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 代理类被调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args   调用方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//触发真实对象之前或者之后可以做一些额外操作</span></span><br><span class=\"line\">        Object result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(beforeAdvice != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            beforeAdvice.before();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = method.invoke(<span class=\"keyword\">this</span>.targetObject, args);<span class=\"comment\">//通过反射执行某个类的某方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(afterAdvice != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterAdvice.after();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Client：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Run</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception  </span>&#123;</span><br><span class=\"line\">        DynamicHandler dynamicHandler = <span class=\"keyword\">new</span> DynamicHandler();</span><br><span class=\"line\">        Subject subject = (Subject) dynamicHandler.createProxy(<span class=\"keyword\">new</span> RealSubject());</span><br><span class=\"line\">        dynamicHandler.setBeforeAdvice(<span class=\"keyword\">new</span> BeforeAdvice() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"听说任天堂出了一款不错的游戏，所以。。。\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        dynamicHandler.setAfterAdvice(<span class=\"keyword\">new</span> AfterAdvice() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"再买点游戏卡\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        subject.buySwitch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Result：<br><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">听说任天堂出了一款不错的游戏，所以。。。</span><br><span class=\"line\">我只想买一台Switch</span><br><span class=\"line\">再买点游戏卡</span><br></pre></td></tr></table></figure></p>\n<p>这里我们只是简单的表明了一下前后通知配合动态代理的使用，真正的AOP涉及到切入点、切面什么时候织入等等。。想要了解的同学可以自行后续去研究，这里主要就是突出代理模式的应用。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>讲完这个栗子，总结一下，代理模式在Java中主要用于系统的解耦，如同中介机构，可以为目标类提供代理服务，以控制对对象的访问，目标类的任何方法在执行前都必须经过代理类，这样代理类就可以用来负责请求的预处理、过滤、将请求分派给目标类处理、以及目标类执行完请求后的后续处理。</p>\n</blockquote>\n",
            "tags": [
                "设计模式",
                "设计模式"
            ]
        },
        {
            "id": "http://vayi.site/singleton/",
            "url": "http://vayi.site/singleton/",
            "title": "一个栗子搞懂单例模式",
            "date_published": "2018-10-06T13:02:41.000Z",
            "content_html": "<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</p>\n</blockquote>\n<h3 id=\"三种单例模式\"><a href=\"#三种单例模式\" class=\"headerlink\" title=\"三种单例模式\"></a>三种单例模式</h3><ul>\n<li><p>饿汉式</p>\n<blockquote>\n<p>系统加载时初始化实例，即使不加载也会初始化，占用内存较大，线程安全</p>\n</blockquote>\n</li>\n<li><p>懒汉式</p>\n<blockquote>\n<p>系统加载不初始化，需要加载实例时再初始化实例，线程不安全，加了双重检查之后线程安全</p>\n</blockquote>\n</li>\n<li><p>枚举</p>\n<blockquote>\n<p>JDK1.5加入的，也算是最推荐使用的方法，兼顾内存跟线程安全</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h2><h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单例模式 (饿汉式)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HungerSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 杜绝外面直接new 只有一种获取方式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HungerSingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实例化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HungerSingleton INSTANCE = <span class=\"keyword\">new</span> HungerSingleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungerSingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：单例占用内存比较小，初始化时就会被用到的情况。</li>\n<li>缺点：单例占用的内存比较大，或单例只是在某个特定场景下才会用到</li>\n</ul>\n<h3 id=\"懒汉式-1\"><a href=\"#懒汉式-1\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单例模式 (懒汉式)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 杜绝外面直接new 只有一种获取方式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实例化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> LazySingleton INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            INSTANCE = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：内存节省，由于此种模式的实例实在需要时创建，如果某次的程序运行没有用到，就是可以节省内存</li>\n<li>缺点：线程不安全，分析见下面问题</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单例模式 (懒汉式)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 杜绝外面直接new 只有一种获取方式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实例化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> LazySingleton INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实例（双重检查）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazySingleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    INSTANCE = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>优点：多线程安全</p>\n</li>\n<li><p>缺点：执行效率低，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举是天然单例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EnumSingleton &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：兼顾内存和多线程安全</li>\n<li>缺点：为啥没有早点遇到你（1.5版本之后更新）</li>\n</ul>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><blockquote>\n<p>为什么要考虑线程安全？</p>\n</blockquote>\n<h3 id=\"举个栗子（懒汉式非双重检查）\"><a href=\"#举个栗子（懒汉式非双重检查）\" class=\"headerlink\" title=\"举个栗子（懒汉式非双重检查）\"></a>举个栗子（懒汉式非双重检查）</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">步骤</th>\n<th style=\"text-align:center\">线程1</th>\n<th style=\"text-align:center\">线程2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">getInstance()</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">getInstance()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">if (INSTANCE == null)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">if (INSTANCE == null)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">INSTANCE = new Singleton();</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">return INSTANCE;</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">INSTANCE = new Singleton();</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">return INSTANCE;</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里就发生的线程安全的问题，1、2两个步骤分别由线程1、2进入getInstance()的方法，然后3、4两个步骤同时通过，因为这个时候确实还没有实例化为null，所以后面就会线程1<code>new</code>一个，线程2也new一个INSTANCE，这样就违背了单例的原则，所以考虑线程安全还是有必要的。</p>\n</blockquote>\n",
            "tags": [
                "设计模式",
                "设计模式"
            ]
        },
        {
            "id": "http://vayi.site/MYSQL_LOCK/",
            "url": "http://vayi.site/MYSQL_LOCK/",
            "title": "MYSQL锁以及死锁的产生跟解决",
            "date_published": "2018-08-17T15:22:59.000Z",
            "content_html": "<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><blockquote>\n<p>MySQL InnoDB存储引擎，实现的是基于多版本的并发控制协议——<a href=\"https://en.wikipedia.org/wiki/Multiversion_concurrency_control\" target=\"_blank\" rel=\"noopener\">MVCC</a> (Multi-Version Concurrency Control) </p>\n<p>在MVCC并发控制中，读操作可以分成两类：<br>快照读 (snapshot read)与当前读 (current read)。<br>快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。<br>当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p>\n<p>快照读<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ?;</span><br></pre></td></tr></table></figure></p>\n<p>当前读<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ? <span class=\"keyword\">lock</span> <span class=\"keyword\">in</span> <span class=\"keyword\">share</span> <span class=\"keyword\">mode</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ? <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> <span class=\"keyword\">values</span> (…);</span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">table</span> <span class=\"keyword\">set</span> ? <span class=\"keyword\">where</span> ?;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ?;</span><br></pre></td></tr></table></figure></p>\n<p>所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。<br>其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。</p>\n</blockquote>\n<h4 id=\"InnoDB锁类型\"><a href=\"#InnoDB锁类型\" class=\"headerlink\" title=\"InnoDB锁类型\"></a>InnoDB锁类型</h4><h5 id=\"X锁-or-S锁\"><a href=\"#X锁-or-S锁\" class=\"headerlink\" title=\"X锁 or S锁\"></a>X锁 or S锁</h5><p>在InnoDb中实现了两个标准的行级锁，可以简单的看为两个读写锁:</p>\n<blockquote>\n<ul>\n<li>S-共享锁：又叫读锁，其他事务可以继续加共享锁，但是不能继续加排他锁。</li>\n<li>X-排他锁: 又叫写锁，一旦加了写锁之后，其他事务就不能加锁了。</li>\n</ul>\n</blockquote>\n<p>兼容性：是指事务A获得一个某行某种锁之后，事务B同样的在这个行上尝试获取某种锁，如果能立即获取，则称锁兼容，反之叫冲突。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">.</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"意向锁\"><a href=\"#意向锁\" class=\"headerlink\" title=\"意向锁\"></a>意向锁</h5><p>意向锁在InnoDB中是表级锁,和他的名字一样他是用来表达一个事务想要获取什么。意向锁分为:</p>\n<blockquote>\n<ul>\n<li>IS-意向共享锁(lock in share mode):表达一个事务想要获取一张表中某几行的共享锁。</li>\n<li>IX-意向排他锁(for update):表达一个事务想要获取一张表中某几行的排他锁。</li>\n</ul>\n<p>这个锁有什么用呢？为什么需要这个锁呢？<br>首先说一下如果没有这个锁，如果要给这个表加上表锁，一般的做法是去遍历每一行看看他是否有行锁，这样的话效率太低。<br>而我们有意向锁，只需要判断是否有意向锁即可，不需要再去一行行的去扫描。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">.</th>\n<th style=\"text-align:center\">IX</th>\n<th style=\"text-align:center\">IS</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IX</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IS</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">冲突</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n<td style=\"text-align:center\">冲突</td>\n<td style=\"text-align:center\">兼容</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：意向锁之间兼容，排它锁（包含意向）跟共享锁冲突，共享锁（包含意向）之间是兼容的</strong></p>\n<h5 id=\"间隙锁-gap锁\"><a href=\"#间隙锁-gap锁\" class=\"headerlink\" title=\"间隙锁(gap锁)\"></a>间隙锁(gap锁)</h5><p><img src=\"/img/lock/gap.png\"></p>\n<blockquote>\n<p>间隙锁顾名思义锁间隙，不锁记录。锁间隙的意思就是锁定某一个范围，间隙锁又叫gap锁，其不会阻塞其他的gap锁，但是会阻塞插入间隙锁，这也是用来防止幻读的关键。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">where条件</th>\n<th style=\"text-align:center\">定位条件</th>\n<th style=\"text-align:center\">终止条件</th>\n<th style=\"text-align:center\">加锁范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ID &lt; X</td>\n<td style=\"text-align:center\">infinum</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">(infinum,X]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ID &lt;= X</td>\n<td style=\"text-align:center\">infinum</td>\n<td style=\"text-align:center\">X的下一条记录</td>\n<td style=\"text-align:center\">(infinum,X的下一条记录]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ID &gt; X</td>\n<td style=\"text-align:center\">X的下一条记录</td>\n<td style=\"text-align:center\">maxnum</td>\n<td style=\"text-align:center\">(X,maxnum]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ID &gt;= X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">maxnum</td>\n<td style=\"text-align:center\">[X,maxnum]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">VARIABLES</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%isolation%'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>Read Uncommited：可以读取未提交记录。此隔离级别，不会使用，忽略。</li>\n<li>Read Committed (RC)：针对当前读，RC隔离级别保证对读取到的记录加锁 (记录锁)，存在幻读现象。</li>\n<li>Repeatable Read (RR)：针对当前读，RR隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，不存在幻读现象。</li>\n<li>Serializable：Serializable隔离级别下，读写冲突，因此并发度急剧下降，在MySQL/InnoDB下不建议使用。</li>\n</ul>\n</blockquote>\n<h4 id=\"查看当前锁的状态\"><a href=\"#查看当前锁的状态\" class=\"headerlink\" title=\"查看当前锁的状态\"></a>查看当前锁的状态</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.INNODB_LOCKS;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Column</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lock_id</td>\n<td style=\"text-align:center\">锁ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_trx_id</td>\n<td style=\"text-align:center\">事务ID, 可以连INNODB_TRX表查事务详情</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_mode</td>\n<td style=\"text-align:center\">锁的模式： S, X, IS, IX, S_GAP, X_GAP, IS_GAP, IX_GAP, or AUTO_INC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_type</td>\n<td style=\"text-align:center\">锁的类型: 行级锁 或者表级锁</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_table</td>\n<td style=\"text-align:center\">加锁的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_index</td>\n<td style=\"text-align:center\">如果是lock_type=’RECORD’ 行级锁 ,为锁住的索引，如果是表锁为null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_space</td>\n<td style=\"text-align:center\">如果是lock_type=’RECORD’ 行级锁 ,为锁住对象的Tablespace ID，如果是表锁为null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_page</td>\n<td style=\"text-align:center\">如果是lock_type=’RECORD’ 行级锁 ,为锁住页号，如果是表锁为null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_rec</td>\n<td style=\"text-align:center\">如果是lock_type=’RECORD’ 行级锁 ,为锁住页号，如果是表锁为null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lock_data</td>\n<td style=\"text-align:center\">事务锁住的主键值，若是表锁，则该值为null</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一句简单的加锁分析\"><a href=\"#一句简单的加锁分析\" class=\"headerlink\" title=\"一句简单的加锁分析\"></a>一句简单的加锁分析</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL1：<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1 <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">SQL2：<span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><blockquote>\n<ul>\n<li>前提一：当前系统的隔离级别是什么？</li>\n<li>前提二：id列是不是主键？</li>\n<li>前提三：id列如果不是主键，那么id列上有索引吗？</li>\n<li>前提四：id列上如果有二级索引，那么这个索引是唯一索引吗？</li>\n</ul>\n</blockquote>\n<h4 id=\"常用组合\"><a href=\"#常用组合\" class=\"headerlink\" title=\"常用组合\"></a>常用组合</h4><blockquote>\n<ul>\n<li>组合一：id列是主键，RC隔离级别</li>\n<li>组合二：id列是二级唯一索引，RC隔离级别</li>\n<li>组合三：id列是二级非唯一索引，RC隔离级别</li>\n<li>组合四：id列上没有索引，RC隔离级别</li>\n<li>组合五：id列是主键，RR隔离级别</li>\n<li>组合六：id列是二级唯一索引，RR隔离级别</li>\n<li>组合七：id列是二级非唯一索引，RR隔离级别</li>\n<li>组合八：id列上没有索引，RR隔离级别</li>\n<li>组合九：Serializable隔离级别</li>\n</ul>\n</blockquote>\n<h4 id=\"分析常用组合\"><a href=\"#分析常用组合\" class=\"headerlink\" title=\"分析常用组合\"></a>分析常用组合</h4><h5 id=\"组合一\"><a href=\"#组合一\" class=\"headerlink\" title=\"组合一\"></a>组合一</h5><p><img src=\"/img/lock/medish.jpg\"></p>\n<blockquote>\n<p>主键为id,隔离级别是RC，只需要在主键上加<code>X锁</code>。</p>\n</blockquote>\n<h5 id=\"组合二\"><a href=\"#组合二\" class=\"headerlink\" title=\"组合二\"></a>组合二</h5><p><img src=\"/img/lock/medish2.jpg\"></p>\n<blockquote>\n<p>id为唯一索引,假设主键为name,隔离级别是RC。由于id是unique索引，因此delete语句会选择走id列的索引进行where条件的过滤，<br>在找到id=10的记录后，首先会将unique索引上的id=10索引记录加上X锁，同时，会根据读取到的name列，回主键索引(聚簇索引)，<br>然后将聚簇索引上的name = ‘d’ 对应的主键索引项加<code>X锁</code>。</p>\n</blockquote>\n<p>问题：为什么聚簇索引上的记录也要加锁？</p>\n<blockquote>\n<p>如果并发的一个SQL，是通过主键索引来更新：<code>update t1 set id = 100 where name = &#39;d&#39;;</code><br>此时，如果delete语句没有将主键索引上的记录加锁，那么并发的update就会感知不到delete语句的存在，<br>违背了同一记录上的更新/删除需要串行执行的约束。</p>\n</blockquote>\n<h5 id=\"组合三\"><a href=\"#组合三\" class=\"headerlink\" title=\"组合三\"></a>组合三</h5><p><img src=\"/img/lock/medish3.jpg\"></p>\n<blockquote>\n<p>id为非唯一索引,隔离级别是RC,相对于组合一、二,组合三又发生了变化,id列上的约束又降低了，id列不再唯一，只有一个普通的索引。<br>首先，id列索引上，满足id = 10查询条件的记录，均已加锁。同时，这些记录对应的主键索引上的记录也都加上了锁。<br>与组合二唯一的区别在于，组合二最多只有一个满足等值查询的记录，而组合三会将所有满足查询条件的记录都加锁。</p>\n</blockquote>\n<h5 id=\"组合四\"><a href=\"#组合四\" class=\"headerlink\" title=\"组合四\"></a>组合四</h5><p><img src=\"/img/lock/medish4.jpg\"></p>\n<blockquote>\n<p>id无索引,隔离级别是RC,由于id列上没有索引，因此只能走聚簇索引，进行全部扫描。<br>从图中可以看到，满足删除条件的记录有两条，但是，聚簇索引上所有的记录，都被加上了X锁。<br>无论记录是否满足条件，全部被加上X锁。既不是加表锁，也不是在满足条件的记录上加行锁。</p>\n</blockquote>\n<h5 id=\"组合五-组合一\"><a href=\"#组合五-组合一\" class=\"headerlink\" title=\"组合五 = 组合一\"></a>组合五 = 组合一</h5><h5 id=\"组合六-组合二\"><a href=\"#组合六-组合二\" class=\"headerlink\" title=\"组合六 = 组合二\"></a>组合六 = 组合二</h5><h5 id=\"组合七\"><a href=\"#组合七\" class=\"headerlink\" title=\"组合七\"></a>组合七</h5><p><img src=\"/img/lock/medish5.jpg\"></p>\n<blockquote>\n<p>id为非唯一索引,隔离级别是RR,首先，通过id索引定位到第一条满足查询条件的记录，加记录上的X锁，加GAP锁，然后加主键聚簇索引上的记录X锁，然后返回；<br>然后读取下一条，重复进行。直至进行到第一条不满足条件的记录，此时，不需要加记录X锁，但是仍旧需要加GAP锁，最后返回结束。</p>\n</blockquote>\n<h5 id=\"组合八\"><a href=\"#组合八\" class=\"headerlink\" title=\"组合八\"></a>组合八</h5><p><img src=\"/img/lock/medish6.jpg\"></p>\n<blockquote>\n<p>如图，这是一个很恐怖的现象。首先，聚簇索引上的所有记录，都被加上了X锁。其次，聚簇索引每条记录间的间隙(GAP)，也同时被加上了GAP锁。这个示例表，只有6条记录，一共需要6个记录锁，7个GAP锁。试想，如果表上有1000万条记录呢？<br>在这种情况下，这个表上，除了不加锁的快照度，其他任何加锁的并发SQL，均不能执行，不能更新，不能删除，不能插入，全表被锁死。<br>所以在Repeatable Read隔离级别下，如果进行全表扫描的当前读，那么会锁上表中的所有记录，同时会锁上聚簇索引内的所有GAP，杜绝所有的并发 更新/删除/插入 操作。</p>\n</blockquote>\n<h5 id=\"组合九\"><a href=\"#组合九\" class=\"headerlink\" title=\"组合九\"></a>组合九</h5><blockquote>\n<p>Serializable隔离级别，影响的是<code>SQL1：select * from t1 where id = 10;</code> 这条SQL。<br>在RC，RR隔离级别下，都是快照读，不加锁。但是在Serializable隔离级别，SQL1会加读锁，也就是说快照读不复存在。<br>在MySQL/InnoDB中，所谓的读不加锁，并不适用于所有的情况，而是隔离级别相关的。Serializable隔离级别，读不加锁就不再成立，所有的读操作，都是当前读。</p>\n</blockquote>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><h4 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h4><p><img src=\"/img/lock/dead.png\"></p>\n<blockquote>\n<p>死锁:是指两个或两个以上的事务在执行过程中，因争夺资源而造成的一种互相等待的现象。<br>说明有等待才会有死锁，解决死锁可以通过去掉等待，比如回滚事务。<br>如果出现回滚，通常来说InnoDB会选择回滚权重较小的事务，也就是<code>undo</code>较小的事务。</p>\n<p>假设我们有一个用户表,然后插入几条数据：</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">11</span>) <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`comment`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">11</span>) <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`index_name`</span> (<span class=\"string\">`name`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">0</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4 <span class=\"keyword\">COLLATE</span>=utf8mb4_bin;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">user</span> <span class=\"keyword\">select</span> <span class=\"number\">20</span>,<span class=\"number\">333</span>,<span class=\"number\">333</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">user</span> <span class=\"keyword\">select</span> <span class=\"number\">25</span>,<span class=\"number\">555</span>,<span class=\"number\">555</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">user</span> <span class=\"keyword\">select</span> <span class=\"number\">20</span>,<span class=\"number\">999</span>,<span class=\"number\">999</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后我们开启事务 <code>A</code> 跟 事务<code>B</code>：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事件点</th>\n<th style=\"text-align:center\">事务A</th>\n<th style=\"text-align:center\">事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">begin;</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">begin;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">delete from user where name = ‘777’;</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">delete from user where name = ‘666’;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">insert user select 26,’666’,’666’;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">insert user select 27,’777’,’777’;</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Query OK, 1 row affected (14.32 sec) Records: 1 Duplicates: 0 Warnings: 0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>可以看见事务A出现被回滚了，而事务B成功执行。 具体每个时间点发生了什么呢?</strong></p>\n<blockquote>\n<ul>\n<li>时间点3：事务A删除需要对777这个索引加上X锁，但是其不存在，所以只对555-999之间加间隙锁</li>\n<li>时间点4：同理事务B也对555-999之间加间隙锁。间隙锁之间是兼容的,所以正常执行，此时两边都有一个间隙锁</li>\n<li>时间点5：事务B，执行Insert操作，首先插入意向锁，但是555-999之间有间隙锁，由于插入意向锁和间隙锁冲突，事务B阻塞，等待事务A释放间隙锁</li>\n<li>时间点6：事务A同理，等待事务B释放间隙锁。于是出现了A-&gt;B,B-&gt;A回路等待。</li>\n<li>时间点7：事务管理器检查到死锁选择回滚事务A</li>\n<li>时间点8：事务B插入操作执行成功。</li>\n</ul>\n</blockquote>\n<p><img src=\"/img/lock/deadlock.png\"></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><blockquote>\n<ul>\n<li>方案一：隔离级别降级为RC，在RC级别下不会加入间隙锁，所以就不会出现毛病了，但是在RC级别下会出现幻读，可提交读都破坏隔离性的毛病，所以这个方案不行。</li>\n<li>方案二：较少的修改代码逻辑，在删除之前，可以通过快照查询(不加锁)，如果查询没有结果，则直接插入，如果有通过主键进行删除，在之前第三节实验2中，通过唯一索引会降级为记录锁，所以不存在间隙锁。</li>\n</ul>\n</blockquote>\n<h4 id=\"防止死锁\"><a href=\"#防止死锁\" class=\"headerlink\" title=\"防止死锁\"></a>防止死锁</h4><blockquote>\n<ul>\n<li>以固定的顺序访问表和行。交叉访问更容易造成事务等待回路。</li>\n<li>尽量避免大事务，占有的资源锁越多，越容易出现死锁。建议拆成小事务。</li>\n<li>降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</li>\n<li>为表添加合理的索引。防止没有索引出现表锁，出现的死锁的概率会突增。</li>\n</ul>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>做一个简单的总结，要做的完全掌握MySQL/InnoDB的加锁规则，甚至是其他任何数据库的加锁规则，需要具备以下的一些知识点：</p>\n<blockquote>\n<ul>\n<li>了解数据库的一些基本理论知识：数据的存储格式 (堆组织表 vs 聚簇索引表)；并发控制协议 (MVCC vs Lock-Based CC)；Two-Phase Locking；数据库的隔离级别定义 (Isolation Level)；</li>\n<li>了解SQL本身的执行计划 (主键扫描 vs 唯一键扫描 vs 范围扫描 vs 全表扫描)；</li>\n<li>了解数据库本身的一些实现细节 (过滤条件提取；Index Condition Pushdown；Semi-Consistent Read)；</li>\n<li>了解死锁产生的原因及分析的方法 (加锁顺序不一致；分析每个SQL的加锁顺序)</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "MYSQL",
                "MYSQL"
            ]
        },
        {
            "id": "http://vayi.site/restructure/",
            "url": "http://vayi.site/restructure/",
            "title": "重构 (附源码)",
            "date_published": "2018-08-02T08:46:00.000Z",
            "content_html": "<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>个人理解</strong>：<em>计算机理解代码很简单,因为不管你怎么写终究会编译成字节码,所以重构的定义简单点来说就是让你写的代码能让其他人看懂。</em></p>\n<p><strong>定义（《重构》作者）</strong>：<em>对软件内部结构的一种调整,目的是在不改变软件可观察行为的前提下,提高其可理解性,降低其修改成本。</em></p>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>代码大家都知道怎么写,多余的也不多说了,直接上干(dao)货(ban)实例非常简单,这是一个影片出租店用的程序,计算每一位顾客的消费金额并打印详单。<br>操作者告诉程序：租客租了那些影片、租期多长,程序便根据租赁时间和影片类型来算出费用。</p>\n<p>影片（Movie）分三类：常规片、儿童片、新片,出了计算费用还需要为常客计算积分,积分会根据租的影片种类是否为新片会有所不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 影片</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> vayi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> regular = <span class=\"number\">0</span>; <span class=\"comment\">//常规片</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> new_release = <span class=\"number\">1</span>; <span class=\"comment\">//新片</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrens = <span class=\"number\">2</span>; <span class=\"comment\">//儿童片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> priceCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Movie</span><span class=\"params\">(String title, <span class=\"keyword\">int</span> priceCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.priceCode = priceCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPriceCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> priceCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPriceCode</span><span class=\"params\">(<span class=\"keyword\">int</span> priceCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.priceCode = priceCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 租赁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> vayi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rental</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Movie movie; <span class=\"comment\">// 租的电影</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> dayRented; <span class=\"comment\">// 租的时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rental</span><span class=\"params\">(Movie movie, <span class=\"keyword\">int</span> dayRented)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dayRented = dayRented;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Movie <span class=\"title\">getMovie</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> movie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDayRented</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayRented;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消费者</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> vayi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector rentals = <span class=\"keyword\">new</span> Vector(); <span class=\"comment\">// 存租的影片</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addRental</span><span class=\"params\">(Rental arg)</span> </span>&#123;</span><br><span class=\"line\">        rentals.addElement(arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">statement</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> totalAmount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> frequentRenterPoints = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Enumeration rentalss = rentals.elements();</span><br><span class=\"line\">        String result = <span class=\"string\">\"RentalNew Record for\"</span> + <span class=\"string\">\" \"</span> + getName() + <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rentalss.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> thisAmount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            Rental each = (Rental) rentalss.nextElement();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (each.getMovie().getPriceCode()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Movie.regular:</span><br><span class=\"line\">                    thisAmount += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (each.getDayRented() &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\">                        thisAmount += (each.getDayRented() - <span class=\"number\">2</span>) * <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> Movie.new_release:</span><br><span class=\"line\">                    thisAmount += each.getDayRented() * <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">case</span> Movie.childrens:</span><br><span class=\"line\">                    thisAmount += <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (each.getDayRented() &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\">                        thisAmount += (each.getDayRented() - <span class=\"number\">3</span>) * <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//积分  每借一张加1个积分</span></span><br><span class=\"line\">            frequentRenterPoints++;</span><br><span class=\"line\">            <span class=\"comment\">//积分累加条件  新版本的片子,借的时间大于1天</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((each.getMovie().getPriceCode() == Movie.new_release) &amp;&amp; each.getDayRented() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                frequentRenterPoints++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            result += <span class=\"string\">\"\\t\"</span> + each.getMovie().getTitle() + <span class=\"string\">\"\\t\"</span></span><br><span class=\"line\">                    + String.valueOf(thisAmount) + <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            totalAmount += thisAmount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result += <span class=\"string\">\"Amount owed is \"</span> + String.valueOf(totalAmount) + <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        result += <span class=\"string\">\"You earned \"</span> + String.valueOf(frequentRenterPoints) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"frequent renter points\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Customer里的statement()方法就是生成详单的函数,也是我们本次重构的入口。那重构之前我们先思考几个问题,你第一眼看到这个statement()方法的时候是怎么想的？<br>首先肯定会说它设计不好,因为没有面向对象实思想,并且后期维护起来也很费人力。<br><strong>假如我们的用户需求有修改,不是打印txt这种格式的文本,而是输出Json或者Html格式的内容的话</strong>,你会发现很难修改,然后往往就是复制一份,接着改改改,编译通过,能跑就ok了<br>这样确实可以,<strong>但如果计费的标准也发生变化了呢?</strong>,那这个时候你得同时修改两个方法,<br>并且还要保证两处修改的一致性,如果后续还需要修改的话就会越积累越多,CV大法的问题就浮现出来了,所以这个时候就需要重构来拯救了。（越早重构越好,没事的时候就看看代码还能不能重构）</p>\n<p>注：如果你发现自己需要为程序添加一个特性,而代码结构让你没法很方便的添加的时候,那么就先<br>    重构这个程序,使特性可以很方便的添加了再添加特性</p>\n<h4 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h4><p>首先开始之前给大家看看同一段代码重构前后的对比<br><img src=\"/img/restructure/restruct.png\"></p>\n<p>代码量少了80%左右,并且结构更清晰了,可扩展性更好,耦合性更低了</p>\n<h4 id=\"重构第一步\"><a href=\"#重构第一步\" class=\"headerlink\" title=\"重构第一步\"></a>重构第一步</h4><p>建立测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> vayi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=========================重构前结果=========================\"</span>);</span><br><span class=\"line\">        Movie mov = <span class=\"keyword\">new</span> Movie(<span class=\"string\">\"xxx\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        Rental ren = <span class=\"keyword\">new</span> Rental(mov, <span class=\"number\">8</span>);</span><br><span class=\"line\">        Customer cus = <span class=\"keyword\">new</span> Customer(<span class=\"string\">\"Cheng\"</span>);</span><br><span class=\"line\">        cus.addRental(ren);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(cus.statement());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=========================重构前结果=========================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=========================重构后结果=========================\"</span>);</span><br><span class=\"line\">        MovieNew newMov = <span class=\"keyword\">new</span> MovieNew(<span class=\"string\">\"xxx\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        RentalNew newRen = <span class=\"keyword\">new</span> RentalNew(newMov, <span class=\"number\">8</span>);</span><br><span class=\"line\">        CustomerNew cusNew = <span class=\"keyword\">new</span> CustomerNew(<span class=\"string\">\"Cheng\"</span>);</span><br><span class=\"line\">        cusNew.addRentalNew(newRen);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(cusNew.statement());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=========================重构后结果=========================\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>切记：重构第一步先建立相应部分的测试类,一定不能影响原来结果的运行,并且重构一块的时候<br>     就需要测试一次,看结果是否一致。</p>\n<h4 id=\"分解并重组statement\"><a href=\"#分解并重组statement\" class=\"headerlink\" title=\"分解并重组statement()\"></a>分解并重组statement()</h4><p>首先我们需要找到重构部分的逻辑泥团,很明显statement()里面的逻辑泥团就是这个switch语句,那我们就把这个地方单独提出一个函数来进行计算,<br>首先找出这个函数内部的局部变量跟参数,我们可以找到一个是each一个是thisAmount,前者并没有被修改,后者会被修改,所以这里我们尽量把不用修改的当参数传递进去,<br>如果是会被修改的当参数就要认真考虑是否可行了,如果只有一个变量会被修改,那我们可以把它当作返回值</p>\n<p><img src=\"/img/restructure/amountFor.png\"></p>\n<p>直接用IDEA的话可以用 <strong>CTRL+ALT+M</strong> 组合键来提取选中的内容为方法<br>然后我们也把函数内的变量名修改下,增加可阅读性,同样是可以用快捷键来修改变量名 <strong>SHIFT+F6</strong></p>\n<p><img src=\"/img/restructure/changeName.png\"></p>\n<p>每次重构完一部分,哪怕很小的一部分也要先测试一遍,只有编译测试通过了才可以进行下一步的重构<br>我们继续看这个提取出来的amountFor()函数,发现里面只用到了Rental类相关的操作,但是却并没有Customer类的操作,<br>所以我们怀疑这里是不是放错了位置,我们把amountFor移动到Rental里面,顺便方法名也改为getCharge(),同样的移动方法也有快捷键: <strong>F6</strong></p>\n<p><img src=\"/img/restructure/getCharge.png\"></p>\n<p>这里就先对getCharge的操作到此为止了,我们再回到statement()函数来<br>这个时候我们已经把switch提取出来了,我们可以看到thisAmount这个变量接收一次getCharge的结果之后就没有改变了<br>那么我们完全可以直接用getCharge来替代它</p>\n<p><img src=\"/img/restructure/removeAmount.png\"></p>\n<p>同样的,重构完之后编译测试一次,保证自己没有破坏任何东西<br>然后回到我们的statement()函数,发现我们的积分计算也跟Rental有关,所以我们可以直接放到Rental类里面去<br>由于这里的积分变量frequentRenterPoints有了初始值，并且是用来统计的，所以我们不用当参数传递进去直接接收返回值进行累加就可以了</p>\n<p><img src=\"/img/restructure/getFre.png\"><br><img src=\"/img/restructure/getFrequentRenterPoints.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><a href=\"https://github.com/Yiaichen/javaDemo/tree/master/javaDemo\" target=\"_blank\" rel=\"noopener\">源码地址</a><br>重构部分的源码在restructure目录下,还有一些其他demo,大家可自行学习</p>\n",
            "tags": [
                "Java",
                "Java",
                "重构"
            ]
        },
        {
            "id": "http://vayi.site/semaphore/",
            "url": "http://vayi.site/semaphore/",
            "title": "Semaphore深入浅出",
            "date_published": "2018-05-15T15:22:59.000Z",
            "content_html": "<h3 id=\"1-Semaphore定义\"><a href=\"#1-Semaphore定义\" class=\"headerlink\" title=\"1. Semaphore定义\"></a>1. Semaphore定义</h3><p><strong>个人理解</strong>：<em>同一时间内，限制指定数量线程通过</em></p>\n<h3 id=\"2-Semaphore的同步性\"><a href=\"#2-Semaphore的同步性\" class=\"headerlink\" title=\"2. Semaphore的同步性\"></a>2. Semaphore的同步性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hc.thread.chapterOne.SemaPhore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 同一时间内  限制多个线程通过</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaPhoreT</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//限制</span></span><br><span class=\"line\">            semaphore.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" begin time:\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" end time:\"</span> + System.currentTimeMillis());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//释放</span></span><br><span class=\"line\">            semaphore.release();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/thread/permits.png\"></p>\n<p>  类Semaphore的构造函数permits可以理解为同时刻通过的线程许可数,代表同一时间内最多允许多少个线程同时执行<br>  acquire()和release()之间的代码<br>  eg: 无参方法的作用是使用1个许可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SemaPhoreT semaPhoreT = <span class=\"keyword\">new</span> SemaPhoreT();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                semaPhoreT.testMethod();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                semaPhoreT.testMethod();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                semaPhoreT.testMethod();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>print：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 begin time:1526479020027</span><br><span class=\"line\">Thread-0 end time:1526479021028</span><br><span class=\"line\">Thread-1 begin time:1526479021028</span><br><span class=\"line\">Thread-1 end time:1526479022028</span><br><span class=\"line\">Thread-2 begin time:1526479022028</span><br><span class=\"line\">Thread-2 end time:1526479023029</span><br></pre></td></tr></table></figure></p>\n<p>可以看到打印信息依次输出，如果给为1个许可相当于这一段的时候是单线程的</p>\n<p>我们改改: <strong>private Semaphore semaphore = new Semaphore(2);</strong><br>print：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0 begin time:1526479290849</span><br><span class=\"line\">Thread-1 begin time:1526479290850</span><br><span class=\"line\">Thread-0 end time:1526479291849</span><br><span class=\"line\">Thread-2 begin time:1526479291849</span><br><span class=\"line\">Thread-1 end time:1526479291850</span><br><span class=\"line\">Thread-2 end time:1526479292850</span><br></pre></td></tr></table></figure></p>\n<p>这个打印结果说明同一时刻是有0跟1两个线程通过acquire()和release()之间的</p>\n<h3 id=\"3-Semaphore实现生产者、消费者\"><a href=\"#3-Semaphore实现生产者、消费者\" class=\"headerlink\" title=\"3. Semaphore实现生产者、消费者\"></a>3. Semaphore实现生产者、消费者</h3><p>Semaphore实现生产者、消费者模式的话还是比较简单的<br>我们以厨师、顾客来进行模拟这样一个场景，废话不多说，直接上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hc.thread.chapterOne.SemaPhore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  Semaphore实现生产者、消费者</span></span><br><span class=\"line\"><span class=\"comment\"> *  created by cheng on 2018/5/16</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RepastService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置5个厨师（生产者）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Semaphore setSemaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置10个顾客（消费者）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Semaphore getSemaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> ReentrantLock reentrantLock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Condition setCondition = reentrantLock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Condition getCondition = reentrantLock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最多一次上4盘菜</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Object[] producePosition = <span class=\"keyword\">new</span> Object[<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isEmpty = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; producePosition.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (producePosition[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                isEmpty = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  isEmpty;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断有没有空盘子</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true：没有空盘子 反之则有</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isFull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; producePosition.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (producePosition[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                isFull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  isFull;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            setSemaphore.acquire();</span><br><span class=\"line\">            reentrantLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (isFull()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//没有空盘子  厨师要等待</span></span><br><span class=\"line\">                setCondition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; producePosition.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (producePosition[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//发现有空盘子了  可以上菜</span></span><br><span class=\"line\">                    producePosition[i] = <span class=\"string\">\"xx菜\"</span>;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 生产了 \"</span> + producePosition[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//上菜</span></span><br><span class=\"line\">            getCondition.signalAll();</span><br><span class=\"line\">            reentrantLock.unlock();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            setSemaphore.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            getSemaphore.acquire();</span><br><span class=\"line\">            reentrantLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//菜已经上齐了  没盘子装了  吃完了才能上</span></span><br><span class=\"line\">                getCondition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; producePosition.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (producePosition[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//发现有菜上来  可以开饭了</span></span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 消费了 \"</span> + producePosition[i]);</span><br><span class=\"line\">                    producePosition[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//端盘子下去</span></span><br><span class=\"line\">            setCondition.signalAll();</span><br><span class=\"line\">            reentrantLock.unlock();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            getSemaphore.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>启动类Run.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hc.thread.chapterOne.SemaPhore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Run</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        RepastService repastService = <span class=\"keyword\">new</span> RepastService();</span><br><span class=\"line\">        ThreadP[] arrayP = <span class=\"keyword\">new</span> ThreadP[<span class=\"number\">20</span>];</span><br><span class=\"line\">        ThreadC[] arrayC = <span class=\"keyword\">new</span> ThreadC[<span class=\"number\">20</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            arrayP[i] = <span class=\"keyword\">new</span> ThreadP(repastService);</span><br><span class=\"line\">            arrayC[i] = <span class=\"keyword\">new</span> ThreadC(repastService);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            arrayP[i].start();</span><br><span class=\"line\">            arrayC[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>线程类ThreadP.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hc.thread.chapterOne.SemaPhore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadP</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepastService service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadP</span><span class=\"params\">(RepastService service)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.service = service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        service.set();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>ReentrantLock</strong>跟<strong>Condition</strong>大家不明白的先自行度娘，后面我抽空再补上，emmmm…<br>ReentrantLock在这里再做一重锁的判断，确保生产者跟消费者都是平衡的<br>如果不加ReentrantLock会怎么样，因为我们是用的Condition进行一个相互唤醒的操作，不用ReentrantLock的话可能会报<strong>IllegalMonitorStateException</strong>的异常</p>\n<p>输出的话就给大家截个图：<br><img src=\"/img/thread/out.png\"></p>\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h3><p>Semaphore semaphore = new Semaphore(1)其实只是初始化多少个许可<br>acquire()相当于动态的减少许可，相应的release()可以动态的增加许可<br>Semaphore提供的限制并发线程的功能，此功能在默认的synchronized种是不提供的</p>\n<p><a href=\"https://github.com/Yiaichen/javaDemo/tree/master/javaDemo\" target=\"_blank\" rel=\"noopener\">源码地址</a><br>源码在thread目录下,还有一些其他demo,大家可自行学习</p>\n",
            "tags": [
                "Java",
                "Java",
                "多线程"
            ]
        },
        {
            "id": "http://vayi.site/dom4j/",
            "url": "http://vayi.site/dom4j/",
            "title": "Java读取xml——dom4j篇",
            "date_published": "2017-08-27T02:33:58.000Z",
            "content_html": "<p>首先引入dom4j的jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hucheng.xmlParse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Attribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XmlUtils</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lasting = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取xml文件</span></span><br><span class=\"line\">            File f = <span class=\"keyword\">new</span> File(<span class=\"string\">\"data.xml\"</span>);</span><br><span class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();</span><br><span class=\"line\">            Document doc = reader.read(f);</span><br><span class=\"line\">            <span class=\"comment\">//获取到根节点</span></span><br><span class=\"line\">            Element node = doc.getRootElement();</span><br><span class=\"line\">            <span class=\"comment\">//判断跟节点下面是否还有子节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.elementIterator().hasNext())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Element next = (Element)node.elementIterator().next();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Iterator&lt;Element&gt; iterator = node.elementIterator();</span><br><span class=\"line\">            <span class=\"comment\">//开始循环子节点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext())&#123;  </span><br><span class=\"line\">                Element e = iterator.next();  </span><br><span class=\"line\">                listNodes(e);</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"运行时间：\"</span> + (System.currentTimeMillis() - lasting) + <span class=\"string\">\" 毫秒\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @描述：循环子节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @作者：chen</span></span><br><span class=\"line\"><span class=\"comment\">     * @时间：2017年8月17日 上午10:53:06</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">listNodes</span><span class=\"params\">(Element node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先获取当前节点的所有属性节点  </span></span><br><span class=\"line\">        List&lt;Attribute&gt; list = node.attributes();  </span><br><span class=\"line\">        <span class=\"comment\">//遍历属性节点  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Attribute attribute : list)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"属性\"</span>+attribute.getName() +<span class=\"string\">\":\"</span> + attribute.getValue());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//如果当前节点内容不为空，则输出  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(node.getTextTrim().equals(<span class=\"string\">\"\"</span>)))&#123;</span><br><span class=\"line\">             System.out.println( node.getName() + <span class=\"string\">\"：\"</span> + node.getText());</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//同时迭代当前节点下面的所有子节点  </span></span><br><span class=\"line\">        <span class=\"comment\">//使用递归  </span></span><br><span class=\"line\">        Iterator&lt;Element&gt; iterator = node.elementIterator();  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;  </span><br><span class=\"line\">            Element e = iterator.next();  </span><br><span class=\"line\">            listNodes(e);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是 <code>data.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VALUES</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VALUE</span> <span class=\"attr\">id</span> = <span class=\"string\">\"1\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"第一个\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NO</span>&gt;</span>鄂B74110<span class=\"tag\">&lt;/<span class=\"name\">NO</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ADDR</span>&gt;</span>湖北省黄石市白沙镇<span class=\"tag\">&lt;/<span class=\"name\">ADDR</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VALUE</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VALUE</span> <span class=\"attr\">id</span> = <span class=\"string\">\"2\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"第二个\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NO</span>&gt;</span>鄂B74111<span class=\"tag\">&lt;/<span class=\"name\">NO</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ADDR</span>&gt;</span>湖北省黄石市白沙镇白沙老街<span class=\"tag\">&lt;/<span class=\"name\">ADDR</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VALUE</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VALUE</span> <span class=\"attr\">id</span> = <span class=\"string\">\"3\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"第三个\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">NO</span>&gt;</span>鄂B74112<span class=\"tag\">&lt;/<span class=\"name\">NO</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ADDR</span>&gt;</span>湖北省黄石市白沙镇白沙中学<span class=\"tag\">&lt;/<span class=\"name\">ADDR</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VALUE</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VALUES</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>控制台会输出：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性id:<span class=\"number\">1</span></span><br><span class=\"line\">属性name:第一个</span><br><span class=\"line\">NO：鄂B74110</span><br><span class=\"line\">ADDR：湖北省黄石市白沙镇</span><br><span class=\"line\">属性id:<span class=\"number\">2</span></span><br><span class=\"line\">属性name:第二个</span><br><span class=\"line\">NO：鄂B74111</span><br><span class=\"line\">ADDR：湖北省黄石市白沙镇白沙老街</span><br><span class=\"line\">属性id:<span class=\"number\">3</span></span><br><span class=\"line\">属性name:第三个</span><br><span class=\"line\">NO：鄂B74112</span><br><span class=\"line\">ADDR：湖北省黄石市白沙镇白沙中学</span><br><span class=\"line\">运行时间：<span class=\"number\">71</span> 毫秒</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Java",
                "Java",
                "xml"
            ]
        },
        {
            "id": "http://vayi.site/mysqlInstall/",
            "url": "http://vayi.site/mysqlInstall/",
            "title": "windows安装mysql（version:5.6.17）",
            "date_published": "2017-08-24T14:49:41.000Z",
            "content_html": "<p>说明：我安装的是免安装版  下载压缩文件解压就直接ok的</p>\n<blockquote>\n<p>新建文件 <code>my.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8 </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\">port = 3306 </span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=D:\\mysql\\</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\">datadir=D:\\mysql\\data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></p>\n<p>cmd输入 <code>mysqld install</code> 回车运行就行了</p>\n<p>输入 <code>net start mysql</code> 启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure></p>\n<p>启动不了则先<strong>删除</strong> <code>data</code> 目录(或移动到其他地方)，再执行:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --initialize</span><br></pre></td></tr></table></figure></p>\n<p>输入 <code>mysql -uroot -p</code> ,默认是没有密码的。回车进入<br>有密码的话，可以 <code>mysql -uroot -p密码</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">mysql -uroot -p密码</span><br></pre></td></tr></table></figure></p>\n<p>也是可以是 <code>mysql -uroot -p</code> &gt;回车输入密码，推荐第二种，原因，你动手之后就知道了。(其实是看看有没有输错 <strong>QAQ</strong>)</p>\n<p>退出 <code>exit</code> 就行了。记住直接关闭 <code>cmd</code> 窗口是没有退出的，要输入 <code>exit</code> 才会退出</p>\n<p>然后添加环境变量：</p>\n</blockquote>\n<p> <i class=\"icon-pencil\"></i> 添加完成就可以直接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入cmd -&gt; mysql -uroot -p -&gt; 回车输入密码</span><br><span class=\"line\">显示所有数据库 -&gt; show databases;</span><br><span class=\"line\">查找数据库 -&gt; use 数据库名;</span><br><span class=\"line\">切换数据库目录 -&gt; show tables;</span><br><span class=\"line\">查找表 -&gt; sql查询工作select * from 表名;</span><br><span class=\"line\">退出 -&gt; exit</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Mysql",
                "mysql"
            ]
        },
        {
            "id": "http://vayi.site/oracleClob/",
            "url": "http://vayi.site/oracleClob/",
            "title": "oracle转化字段为clob",
            "date_published": "2017-08-23T12:58:05.000Z",
            "content_html": "<p>因为Oracle是没办法直接进行字段转化的,所以这里我们提供一个取巧的办法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--增加大字段项  </span><br><span class=\"line\">alter table 需要修改的表 add introduce clob;  </span><br><span class=\"line\">--将需要改成大字段的项内容copy到大字段中  </span><br><span class=\"line\">update 需要修改的表 <span class=\"built_in\">set</span> introduce=需要修改的字段;</span><br><span class=\"line\">--删除原有字段  </span><br><span class=\"line\">alter table 需要修改的表 drop column 需要修改的字段;  </span><br><span class=\"line\">--将大字段名改成原字段名</span><br><span class=\"line\">alter table t_sim_activity rename column introduce to 需要修改的字段;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Oracle",
                "oracle"
            ]
        },
        {
            "id": "http://vayi.site/Hexo-gitment/",
            "url": "http://vayi.site/Hexo-gitment/",
            "title": "Hexo+gitment",
            "date_published": "2017-08-16T14:16:59.000Z",
            "content_html": "<p>因为多说关闭的原因，所以选择gitment来搭建留言评论 /(ㄒoㄒ)/~~</p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><h3 id=\"1-注册-OAuth-Application\"><a href=\"#1-注册-OAuth-Application\" class=\"headerlink\" title=\"1. 注册 OAuth Application\"></a>1. 注册 OAuth Application</h3><p>首先需要注册一个OAuth Application <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">点击此处</a></p>\n<p><img src=\"/img/oauth.png\"></p>\n<p>其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如 我的是<a href=\"https://yiaichen.github.io/）\" target=\"_blank\" rel=\"noopener\">https://yiaichen.github.io/）</a><br>注册完成之后你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p>\n<h3 id=\"2-引入-Gitment\"><a href=\"#2-引入-Gitment\" class=\"headerlink\" title=\"2. 引入 Gitment\"></a>2. 引入 Gitment</h3><p>将下面的代码添加到你的页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://imsun.github.io/gitment/style/default.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://imsun.github.io/gitment/dist/gitment.browser.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var gitment = new Gitment(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  id: '页面 ID', // 可选。默认为 location.href</span></span><br><span class=\"line\"><span class=\"undefined\">  owner: '你的 GitHub ID',</span></span><br><span class=\"line\"><span class=\"undefined\">  repo: '存储评论的 repo',</span></span><br><span class=\"line\"><span class=\"undefined\">  oauth: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    client_id: '你的 client ID',</span></span><br><span class=\"line\"><span class=\"undefined\">    client_secret: '你的 client secret',</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">gitment.render('container')</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里的id是可选的  不填就删掉（这里画个圈，因为我是踩过坑的 QAQ）<br>owner：这里填github的用户名 比如我就填 Yiaichen<br>repo：这里是存储评论的仓库 一般是建一个仓库地址 我这边就是 Yiaichen.github.io</p>\n<p><img src=\"/img/owner.png\"></p>\n<p>然后下面的client_id 跟 client_secret就填你刚刚注册得到的就ok了</p>\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3. 初始化\"></a>3. 初始化</h3><p>其实到这里差不多已经配置好了 只需要初始化一下<br>发布你的页面 （不要在本地测试，因为本地是一定初始化失败的）<br>然后登录你的github账号，必须跟第二步owner用户名相同的账号<br>登录之后点击初始化按钮，bingo~</p>\n<p><img src=\"/img/gitment.png\"></p>\n<h3 id=\"4-常见错误\"><a href=\"#4-常见错误\" class=\"headerlink\" title=\"4.常见错误\"></a>4.常见错误</h3><p>ERROR:NOT FOUND ：一般是owner或者repo配置错误了，照着第二步来就好<br>初始化的时候报alidation failed ：都说已经踩过的坑了啦QAQ 自己往上找吧/(ㄒoㄒ)/~~</p>\n",
            "tags": [
                "Hexo",
                "hexo"
            ]
        },
        {
            "id": "http://vayi.site/Github+Hexo/",
            "url": "http://vayi.site/Github+Hexo/",
            "title": "Github+Hexo",
            "date_published": "2017-08-05T03:35:46.093Z",
            "content_html": "<p>记录整个搭建Hexo的步骤吧~</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>1、<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git</a><br>2、<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs</a><br>3、<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>账号</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>首先把git跟nodejs下载ok(地址在上方)<br>安装的话就不细说了，一直next就可以了<br>验证有没有安装好的话直接在控制台中输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm -v</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/version.png\"></p>\n<p>如果有对应的版本输出就说明安装已经ok啦</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>在本地建立一个blog文件夹（我是建在了D盘下面）<br>然后打开git-bash，千万别用cmd跑后面的命令了，这里要圈起来，重点要考！！！</p>\n<p>现在开始安装Hexo了，cd进我们的blog目录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/hexocli.png\"></p>\n<p>这里会提示一个warn不用管他，然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/--sava.png\"></p>\n<p>我这里直接用cmd截图了，这里无所谓，最好都用git-bash，出现了一堆白字跟warn之后，我们得hexo就安装好了，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo -v.png\"></p>\n<p>如果看到对应的hexo版本信息就说明已经安装ok了</p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>安装好了hexo我们就要开始来使用他了，首先执行初始化：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo init.png\"></p>\n<p>这里会在我们自己建的目录下生成hexo的文件，如果执行hexo init的时候报not empty之类的错<br>解决方案是建议删除目录下的所有文件  然后重新执行一次hexo init命令</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/npm install.png\"></p>\n<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p>\n<p>然后在命令行输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo g.png\"></p>\n<p>hexo g的话会在目录下生成一个public文件夹，hexo s就是启动服务啦~<br>如果显示上面的信息的话就在本地已经启动ok啦~<br>然后我们在浏览器中输入：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a></p>\n<p><img src=\"/img/hexo.png\"></p>\n<p>大功告成~ （停止服务的话Ctrl+c就可以了）</p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>本地发布部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>后面有改动的话基本就是这三个命令，然后本地就可以显示更新后的内容啦~</p>\n",
            "tags": [
                "Hexo",
                "hexo"
            ]
        }
    ]
}